// Copyright 2023 Sean Luke
// (sean@cs.gmu.edu)
//
// Released under the Apache 2.0 License
//
// WARNING: Mozzi itself is released under a broken non-open-source license, namely the 
// Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
// This license is not compatible with the LGPL (used by the Arduino itself!) and is
// also viral, AND is non-commercial only.  What a mess.  I am pushing them to change 
// their license to something reasonable like Apache or GPL but in the meantime I don't 
// have much choice but to turn my head and ignore the broken license.  So I'm releasing
// under Apache for the time being.


/// BOOKER
///
/// Booker is a Hammond Organ simulator, complete with Leslie.  It is meant to run on the 
/// AE Modular GRAINS, but it could be  adapted to any Arduino.  
///
/// SET GRAINS TO MOZZI MODE.  Sorry, no Grains mode.
///
/// You will need to install the Mozzi Library.  You can do this from the Library Manager
/// in your Arduino IDE.
///
/// NOTE: Probably due to the voltage divider on all of its analog inputs, GRAINS is limited
/// to about a 45 note range.  
///
/// NOTE: At extremely high frequencies, a few of Booker's drawbars will go over Nyquist and
/// you may hear some antialiasing effects.  I can fix this but it puts me over the
/// computational budget of the device, so it's not going to happen.
///
/// Booker comes with a Leslie, which is on by default:


#define LESLIE_ON		// To turn this off, put a // before the #define, as in //#define

// Leslie changes both the amplitude and pitch at a certain rate.
// You can adjust them here

#define LESLIE_FREQUENCY 5.66			// This is the 450 speed.  The classic slower speed is 0.66, but it's too slow
#define LESLIE_VOLUME 2					// Values are 0 (off), 1, 2, 3, 4, 5, 6, 7, or 8 (max).
#define LESLIE_PITCH 5					// Values are 0.0 (none) ... 63.0 (max).  Can be floating point.

/// CONFIGURATION
///
/// IN 1            [Unused]
/// IN 2            [Unused]
/// IN 3            Pitch CV	[This isn't IN2, like Pitch Tune, because Pitch Tune must be +/-]
/// AUDIO IN (A)    [Unused]
/// AUDIO OUT       Out
/// DIGITAL OUT (D) [Unused]
///
/// POT 1           Choice of Organ [Set the switch to MAN]
///
/// POT 2           Pitch Tune  [Set the switch to MAN]
///
/// POT 3           Volume

/// Lastly, here is our present drawbar selection.  Keep this to no more than 31 but feel free
/// to change the selections.  There is a big list of 99 selections below you could swap in.

#define NUM_DRAWBAR_SELECTIONS 16
int8_t drawbars[NUM_DRAWBAR_SELECTIONS][9] = 
{
    { 8, 8, 8, 8, 8, 8, 8, 8, 8 },    // 888888888 Full Organ
    { 8, 8, 5, 3, 2, 4, 5, 8, 8 },    // 885324588 Blues
    { 8, 8, 8, 8, 0, 0, 0, 0, 0 },    // 888800000 Booker T. Jones 1
    { 8, 8, 8, 6, 3, 0, 0, 0, 0 },    // 888630000 Booker T. Jones 2
    { 8, 7, 8, 0, 0, 0, 4, 5, 6 },    // 878000456 Bright Comping
    { 8, 4, 3, 0, 0, 0, 0, 0, 0 },    // 843000000 Dark Comping
    { 8, 0, 8, 8, 0, 8, 0, 0, 8 },    // 808808008 Gospel 1
    { 8, 8, 8, 0, 0, 0, 0, 0, 8 },    // 888000008 Gospel 2
    { 8, 6, 8, 6, 6, 6, 5, 6, 8 },    // 868666568 Greg Allman 1
    { 8, 8, 8, 6, 0, 0, 0, 0, 0 },    // 888600000 Greg Allman 2
    { 8, 8, 6, 8, 0, 0, 3, 0, 0 },    // 886800300 Paul Shaffer 1
    { 8, 8, 8, 7, 6, 8, 8, 8, 8 },    // 888768888 Paul Shaffer 2
    { 8, 8, 8, 8, 7, 8, 6, 7, 8 },    // 888878678 Paul Shaffer 3
    { 8, 0, 8, 0, 0, 0, 0, 0, 8 },    // 808000008 Reggae
    { 0, 8, 0, 0, 0, 0, 0, 0, 0 },    // 080000000 Sine
    { 8, 7, 6, 5, 4, 3, 2, 1, 1 },    // 876543211 Strings
};

/** Here is a collection of Drawbar Selections for you.
	You can find more online.
	
    { 0, 0, 7, 7, 4, 0, 0, 3, 4 },    // 007740034 Alone in the City
    { 8, 8, 7, 7, 2, 4, 1, 1, 0 },    // 887724110 America (Gospel) (U)
    { 0, 0, 6, 6, 0, 6, 0, 0, 0 },    // 006606000 America (Gospel) (L)
    { 8, 8, 5, 3, 2, 4, 5, 8, 8 },    // 885324588 Blues
    { 8, 8, 8, 8, 0, 0, 0, 0, 0 },    // 888800000 Booker T. Jones 1
    { 8, 8, 8, 6, 3, 0, 0, 0, 0 },    // 888630000 Booker T. Jones 2
    { 8, 8, 8, 8, 0, 8, 0, 0, 8 },    // 888808008 Born to B3 (Gospel) (U)
    { 0, 0, 7, 7, 2, 5, 4, 0, 0 },    // 007725400 Born to B3 (Gospel) (L)
    { 8, 8, 8, 1, 1, 0, 0, 0, 0 },    // 888110000 Brian Auger 1
    { 8, 8, 8, 8, 0, 5, 0, 0, 0 },    // 888805000 Brian Auger 2
    { 8, 7, 8, 0, 0, 0, 4, 5, 6 },    // 878000456 Bright Comping
    { 8, 0, 0, 0, 0, 0, 8, 8, 8 },    // 800000888 Brother Jack
    { 8, 4, 3, 0, 0, 0, 0, 0, 0 },    // 843000000 Dark Comping
    { 8, 8, 8, 8, 8, 8, 8, 8, 8 },    // 888888888 Dark Solo A (U)
    { 6, 6, 2, 0, 0, 0, 0, 0, 0 },    // 662000000 Dark Solo A (L)
    { 8, 2, 8, 2, 0, 0, 0, 0, 2 },    // 828200002 Dark Solo B (U)
    { 6, 0, 6, 0, 0, 0, 0, 0, 0 },    // 606000000 Dark Solo B (L)
    { 8, 8, 8, 0, 0, 0, 8, 8, 8 },    // 888000888 Fat
    { 0, 8, 0, 0, 8, 0, 8, 8, 3 },    // 080080883 Fifth Organ (Gospel) (U)
    { 0, 0, 8, 8, 0, 6, 0, 0, 0 },    // 008806000 Fifth Organ (Gospel) (L)
    { 0, 0, 6, 8, 0, 2, 0, 0, 0 },    // 006802000 Flutes
    { 8, 8, 8, 6, 6, 6, 8, 8, 8 },    // 888666888 Full and High
    { 8, 6, 8, 8, 6, 8, 0, 6, 8 },    // 868868068 Full and Sweet
    { 8, 8, 8, 8, 8, 8, 8, 8, 8 },    // 888888888 Full Organ
    { 6, 8, 8, 6, 0, 0, 0, 0, 4 },    // 688600004 Funky Comping
    { 8, 8, 8, 8, 0, 0, 0, 0, 0 },    // 888800000 Gimme Some Loving
    { 8, 0, 8, 8, 0, 8, 0, 0, 8 },    // 808808008 Gospel 1
    { 8, 8, 8, 0, 0, 0, 0, 0, 8 },    // 888000008 Gospel 2
    { 8, 6, 8, 6, 6, 6, 5, 6, 8 },    // 868666568 Greg Allman 1
    { 8, 8, 8, 6, 0, 0, 0, 0, 0 },    // 888600000 Greg Allman 2
    { 8, 8, 6, 0, 0, 0, 0, 4, 0 },    // 886000040 Greg Allman 3
    { 8, 8, 8, 8, 0, 0, 0, 8, 8 },    // 888800088 Greg Rolie 1
    { 8, 8, 6, 4, 0, 0, 0, 0, 0 },    // 886400000 Greg Rolie 2
    { 8, 8, 8, 8, 8, 6, 6, 6, 6 },    // 888886666 Greg Rolie 4
    { 8, 8, 8, 4, 2, 0, 0, 8, 0 },    // 888420080 Groove Holmes (Gospel) (U)
    { 0, 0, 0, 5, 0, 5, 0, 0, 0 },    // 000505000 Groove Holmes (Gospel) (L)
    { 8, 8, 0, 0, 0, 0, 0, 0, 0 },    // 880000000 House Bass (Gospel) (U)
    { 0, 0, 8, 0, 8, 0, 0, 0, 0 },    // 008080000 House Bass (Gospel) (L)
    { 8, 6, 8, 6, 0, 0, 0, 0, 6 },    // 868600006 Jimmy McGriff 1
    { 8, 8, 3, 2, 0, 0, 1, 2, 5 },    // 883200125 Jimmy McGriff 2 (Gospel) (U)
    { 4, 4, 8, 6, 5, 0, 0, 0, 0 },    // 448650000 Jimmy McGriff 2 (Gospel) (L)
    { 8, 8, 8, 8, 8, 8, 8, 8, 8 },    // 888888888 Jimmy Smith 1 (U)
    { 0, 0, 7, 5, 0, 0, 0, 0, 0 },    // 007500000 Jimmy Smith 1 (L)
    { 8, 8, 8, 0, 0, 0, 0, 0, 0 },    // 888000000 Jimmy Smith 2 (U)
    { 8, 3, 8, 0, 0, 0, 0, 0, 0 },    // 838000000 Jimmy Smith 2 (L)
    { 8, 8, 8, 0, 0, 0, 0, 0, 0 },    // 888000000 Jimmy Smith 3 (U)
    { 8, 0, 8, 0, 0, 0, 0, 0, 0 },    // 808000000 Jimmy Smith 3 (L)
    { 8, 8, 8, 4, 0, 0, 0, 8, 0 },    // 888400080 Joey DeFrancesco
    { 8, 8, 4, 4, 0, 0, 0, 0, 0 },    // 884400000 Jon Lord
    { 8, 8, 0, 0, 6, 0, 0, 0, 0 },    // 880060000 Latin (Gospel) (U)
    { 0, 0, 6, 6, 7, 6, 0, 0, 0 },    // 006676000 Latin (Gospel) (L)
    { 8, 0, 0, 8, 0, 8, 0, 0, 0 },    // 800808000 Matthew Fisher
    { 8, 6, 8, 8, 0, 0, 0, 0, 4 },    // 868800004 Melvin Crispel
    { 8, 0, 3, 6, 0, 0, 0, 0, 0 },    // 803600000 Mellow
    { 0, 0, 7, 8, 0, 0, 4, 5, 3 },    // 007800453 Meditation Time (Gospel) (U)
    { 0, 0, 6, 7, 0, 0, 5, 4, 0 },    // 006700540 Meditation Time (Gospel) (L)
    { 8, 8, 6, 8, 0, 0, 3, 0, 0 },    // 886800300 Paul Shaffer 1
    { 8, 8, 8, 7, 6, 8, 8, 8, 8 },    // 888768888 Paul Shaffer 2
    { 8, 8, 8, 8, 7, 8, 6, 7, 8 },    // 888878678 Paul Shaffer 3
    { 8, 5, 0, 0, 0, 5, 0, 0, 0 },    // 850005000 Pink Floyd
    { 8, 8, 8, 8, 0, 0, 0, 0, 0 },    // 888800000 Power Chords
    { 8, 8, 8, 8, 0, 0, 0, 0, 0 },    // 888800000 Progessive (Gospel) (U)
    { 0, 0, 8, 8, 8, 4, 0, 0, 0 },    // 008884000 Progessive (Gospel) (L)
    { 0, 0, 6, 8, 7, 6, 4, 0, 0 },    // 006876400 Ray Charles
    { 8, 0, 8, 0, 0, 0, 0, 0, 8 },    // 808000008 Reggae
    { 8, 8, 8, 8, 0, 0, 0, 0, 0 },    // 888800000 Rock, R&B (U)
    { 8, 4, 8, 0, 0, 0, 0, 0, 0 },    // 848000000 Rock, R&B (L)
    { 8, 0, 0, 3, 8, 8, 8, 8, 8 },    // 800388888 Screaming (Gospel) (U)
    { 0, 0, 7, 0, 3, 3, 3, 3, 3 },    // 007033333 Screaming (Gospel) (L)
    { 0, 0, 8, 8, 8, 8, 8, 0, 0 },    // 008888800 Shirley Scott
    { 8, 3, 0, 0, 0, 0, 3, 7, 8 },    // 830000378 Simmering
    { 0, 8, 0, 0, 0, 0, 0, 0, 0 },    // 080000000 Sine
    { 8, 7, 6, 5, 5, 6, 7, 8, 8 },    // 876556788 Shouting 1
    { 6, 6, 8, 8, 4, 8, 5, 8, 8 },    // 668848588 Shouting 2
    { 8, 7, 8, 6, 4, 5, 4, 6, 6 },    // 878645466 Shouting 3 (Gospel) (U)
    { 8, 8, 8, 8, 0, 0, 0, 0, 0 },    // 888800000 Shouting 3 (Gospel) (L)
    { 0, 0, 8, 4, 0, 0, 0, 0, 0 },    // 008400000 Slow Balllad
    { 0, 6, 8, 8, 4, 0, 0, 0, 3 },    // 068840003 Slowly
    { 8, 8, 8, 7, 0, 0, 0, 0, 0 },    // 888700000 Soft Backing (Gospel) (U)
    { 5, 5, 5, 4, 0, 0, 0, 0, 0 },    // 555400000 Soft Backing (Gospel) (L)
    { 8, 0, 8, 4, 0, 0, 0, 0, 8 },    // 808400008 Soft Chords
    { 6, 7, 8, 4, 0, 4, 2, 3, 1 },    // 678404231 Speaker Talking (Gospel) (U)
    { 0, 0, 6, 6, 0, 2, 0, 2, 4 },    // 006602024 Speaker Talking (Gospel) (L)
    { 8, 8, 8, 6, 4, 3, 2, 0, 0 },    // 888643200 Steppenwolf
    { 8, 8, 8, 8, 7, 6, 7, 8, 8 },    // 888876788 Steve Winwood
    { 8, 7, 6, 5, 4, 3, 2, 1, 1 },    // 876543211 Strings
    { 0, 0, 8, 0, 0, 0, 0, 0, 0 },    // 008000000 Sweet
    { 7, 8, 7, 7, 4, 6, 0, 4, 6 },    // 787746046 Testimony Service  (Gospel) (U)
    { 0, 0, 8, 8, 0, 0, 6, 7, 3 },    // 008800673 Testimony Service  (Gospel) (L)
    { 8, 7, 8, 6, 5, 6, 4, 6, 7 },    // 878656467 Theatre Organ (Gospel) (U)
    { 0, 0, 8, 8, 4, 4, 0, 0, 0 },    // 008844000 Theatre Organ (Gospel) (L)
    { 8, 8, 8, 8, 0, 0, 0, 0, 0 },    // 888800000 Tom Coster
    { 8, 0, 0, 0, 0, 0, 0, 0, 8 },    // 800000008 Whistle 1
    { 8, 8, 8, 0, 0, 0, 0, 0, 8 },    // 888000008 Whistle 2
    { 6, 8, 8, 6, 0, 0, 0, 0, 0 },    // 688600000 Whiter Shade Of Pale 1 (U)
    { 8, 8, 0, 0, 7, 0, 7, 7, 0 },    // 880070770 Whiter Shade Of Pale 1 (L)
    { 8, 8, 8, 8, 0, 8, 0, 0, 6 },    // 888808006 Whiter Shade Of Pale 2 (U)
    { 0, 0, 4, 4, 4, 0, 0, 0, 0 },    // 004440000 Whiter Shade Of Pale 2 (L)
    { 8, 6, 6, 8, 0, 0, 0, 0, 0 },    // 866800000 Wide Leslie
*/    



// ADJUSTING TRACKING

// Grains can only do about 3.75 octaves due to its circuit design.  I have positioned 
// it to start at the C two octaves below middle C.  For the same reason, I have to 
// "stretch" Grains from 3.75V to 5V, so to speak, in software.  I have tuned this 
// stretch for my own Grains, but if Booker is tracking poorly in your Grains, get with 
// me and we might be able to customize it for you.
//
// In short, you can play with the function that has "pow(...)" in it below to get the
// tracking you need.  65.41 is the frequency two octaves below middle C.  45.2 is the
// stretch factor appropriate for my grains -- higher is more stretched.  60 is a full
// 5V, 5-octave (60 note) stretch.  You might need to stretch or decrease by just a tad,
// like .1 or .2.  I don't know how consistent Grains' internal resistors are from unit
// to unit.
//
// Once you have a desired base frequency and stretch value, you could pump out all the
// values from 0 to 1023 and put them into the "pitch[]" table.  I use some lisp code
// as below but you can choose whatever language suits your fancy.  :-)  Then use the
// FREQUENCIES macro instead of the pow() function, it's significantly faster.



#define CONTROL_RATE 128			// More than this and we're gonna get clicks probably

#include <MozziGuts.h>
#include <Oscil.h>
#include <tables/sin256_int8.h>

/// OSCILLATORS

Oscil<SIN256_NUM_CELLS, AUDIO_RATE> tonewheel1(SIN256_DATA);
Oscil<SIN256_NUM_CELLS, AUDIO_RATE> tonewheel2(SIN256_DATA);
Oscil<SIN256_NUM_CELLS, AUDIO_RATE> tonewheel3(SIN256_DATA);
Oscil<SIN256_NUM_CELLS, AUDIO_RATE> tonewheel4(SIN256_DATA);
Oscil<SIN256_NUM_CELLS, AUDIO_RATE> tonewheel5(SIN256_DATA);
Oscil<SIN256_NUM_CELLS, AUDIO_RATE> tonewheel6(SIN256_DATA);
Oscil<SIN256_NUM_CELLS, AUDIO_RATE> tonewheel7(SIN256_DATA);
Oscil<SIN256_NUM_CELLS, AUDIO_RATE> tonewheel8(SIN256_DATA);
Oscil<SIN256_NUM_CELLS, AUDIO_RATE> tonewheel9(SIN256_DATA);

Oscil<SIN256_NUM_CELLS, AUDIO_RATE> oscils[9] = 
	{ 
	tonewheel1, tonewheel2, tonewheel3,
	tonewheel4, tonewheel5, tonewheel6, 
	tonewheel7, tonewheel8, tonewheel9 
	};

#ifdef LESLIE_ON
Oscil<SIN256_NUM_CELLS, CONTROL_RATE> leslie(SIN256_DATA);		// Leslie LFO
#endif
	
// This has custom tracking for my Grains module.  To change the base note, you need to specify
// its frequency (I have 65.41, C two octaves below middle C).  And to "stretch" it, you need to
// change 45.2 to something else -- bigger is more stretched, and 60 would be perfectly 5V.  :-(
//
// (dotimes (p (+ 512 1024)) 
//	(format t "~a, " (* 27.50 (expt 2.0 (* p 45.2 1/1023 1/12))))
//	(when (= 15 (mod p 16)) (terpri)))
//
// I can't explain why it's 75% (45.0 vs 60.0)

// A0 and up. Thus C will be centered on the pitch knob.
PROGMEM const float pitches[1024+512] = {
27.5, 27.570272, 27.640728, 27.711363, 27.782175, 27.85317, 27.924347, 27.995705, 28.067245, 28.138968, 28.210876, 28.282965, 28.355242, 28.4277, 28.500343, 28.573175, 
28.646189, 28.719393, 28.792784, 28.86636, 28.940128, 29.014082, 29.088223, 29.162558, 29.23708, 29.31179, 29.386696, 29.46179, 29.537079, 29.612556, 29.688229, 29.764095, 
29.840157, 29.916409, 29.992857, 30.069504, 30.146341, 30.223377, 30.30061, 30.378042, 30.455671, 30.533497, 30.611523, 30.689749, 30.768175, 30.8468, 30.925627, 31.004652, 
31.083883, 31.163317, 31.242952, 31.32279, 31.402832, 31.483078, 31.563532, 31.64419, 31.725052, 31.806124, 31.887402, 31.96889, 32.050583, 32.132484, 32.214596, 32.296917, 
32.37945, 32.46219, 32.545147, 32.62831, 32.711693, 32.795284, 32.87909, 32.963108, 33.047344, 33.131794, 33.216457, 33.30134, 33.38644, 33.471756, 33.55729, 33.64304, 
33.72901, 33.815205, 33.901615, 33.98825, 34.075104, 34.162178, 34.249477, 34.336998, 34.424744, 34.512714, 34.600906, 34.689327, 34.777973, 34.866848, 34.955948, 35.045273, 
35.134827, 35.224613, 35.31463, 35.40487, 35.495342, 35.58605, 35.676987, 35.768154, 35.85956, 35.951195, 36.043064, 36.135166, 36.22751, 36.320084, 36.4129, 36.505947, 
36.599236, 36.692764, 36.786526, 36.88053, 36.974777, 37.069263, 37.163994, 37.25896, 37.35417, 37.449627, 37.545326, 37.64127, 37.73746, 37.833893, 37.930576, 38.027504, 
38.124683, 38.222103, 38.31978, 38.4177, 38.515873, 38.6143, 38.712975, 38.8119, 38.911083, 39.010517, 39.110203, 39.210144, 39.310345, 39.4108, 39.511513, 39.61248, 
39.713703, 39.81519, 39.916935, 40.01894, 40.121204, 40.22373, 40.32652, 40.42957, 40.532887, 40.636463, 40.740303, 40.844414, 40.948788, 41.05343, 41.158337, 41.26351, 
41.368958, 41.47467, 41.580658, 41.686916, 41.79344, 41.90024, 42.007313, 42.11466, 42.222282, 42.330173, 42.438347, 42.546795, 42.655518, 42.764523, 42.873802, 42.983364, 
43.0932, 43.203327, 43.31373, 43.42441, 43.53538, 43.64663, 43.758167, 43.869984, 43.98209, 44.094482, 44.207165, 44.320133, 44.433388, 44.546932, 44.66077, 44.774895, 
44.889313, 45.004025, 45.11903, 45.234325, 45.349922, 45.46581, 45.581993, 45.69847, 45.815254, 45.932327, 46.049706, 46.16738, 46.285355, 46.403633, 46.522217, 46.641098, 
46.760284, 46.879776, 46.999577, 47.11968, 47.240086, 47.36081, 47.481834, 47.603172, 47.724815, 47.84677, 47.96904, 48.09162, 48.214516, 48.337723, 48.461243, 48.585083, 
48.70924, 48.833714, 48.958504, 49.08361, 49.20904, 49.33479, 49.46086, 49.587254, 49.71397, 49.84101, 49.968372, 50.096066, 50.22408, 50.352425, 50.481094, 50.610096, 
50.739426, 50.869087, 50.999077, 51.1294, 51.26006, 51.391052, 51.522373, 51.654034, 51.78603, 51.91837, 52.05104, 52.18405, 52.3174, 52.451096, 52.58513, 52.71951, 
52.85423, 52.989292, 53.124702, 53.260456, 53.39656, 53.53301, 53.669807, 53.806957, 53.944458, 54.08231, 54.22051, 54.359066, 54.49798, 54.63724, 54.776863, 54.91684, 
55.057175, 55.19787, 55.338924, 55.480335, 55.62211, 55.76425, 55.906746, 56.049614, 56.192844, 56.33644, 56.4804, 56.624737, 56.76944, 56.9145, 57.059944, 57.205753, 
57.35194, 57.498497, 57.645435, 57.792732, 57.940426, 58.088486, 58.23693, 58.385742, 58.534943, 58.68453, 58.834484, 58.984837, 59.135567, 59.28668, 59.43818, 59.590076, 
59.74235, 59.89501, 60.048073, 60.201523, 60.35536, 60.509594, 60.664223, 60.819237, 60.97466, 61.130474, 61.28669, 61.4433, 61.600315, 61.75773, 61.915546, 62.07377, 
62.232395, 62.39142, 62.550858, 62.7107, 62.870953, 63.031616, 63.192688, 63.354168, 63.516064, 63.678375, 63.841103, 64.00424, 64.1678, 64.33177, 64.49617, 64.66098, 
64.82622, 64.99188, 65.15796, 65.32446, 65.491394, 65.65875, 65.82654, 65.99475, 66.1634, 66.33247, 66.501976, 66.67192, 66.84229, 67.0131, 67.18435, 67.356026, 
67.52815, 67.700714, 67.873726, 68.047165, 68.221054, 68.39539, 68.57016, 68.74539, 68.92107, 69.09718, 69.27375, 69.45078, 69.62826, 69.80618, 69.98457, 70.16341, 
70.342705, 70.52246, 70.702675, 70.88335, 71.06448, 71.246086, 71.428154, 71.61067, 71.79367, 71.977135, 72.161064, 72.34547, 72.53034, 72.71568, 72.901505, 73.08779, 
73.27457, 73.46181, 73.649536, 73.837746, 74.02642, 74.2156, 74.40525, 74.59538, 74.78601, 74.97712, 75.16872, 75.3608, 75.553375, 75.74645, 75.94002, 76.13407, 
76.32863, 76.523674, 76.71922, 76.915276, 77.11182, 77.308876, 77.50644, 77.7045, 77.90306, 78.102135, 78.30172, 78.501816, 78.702415, 78.903534, 79.10516, 79.30731, 
79.50997, 79.713165, 79.91686, 80.12108, 80.32582, 80.53109, 80.73688, 80.9432, 81.15003, 81.35741, 81.56531, 81.77375, 81.98271, 82.192215, 82.40225, 82.612816, 
82.82392, 83.03558, 83.247765, 83.460495, 83.67378, 83.8876, 84.10197, 84.31688, 84.53235, 84.74836, 84.96493, 85.18205, 85.39972, 85.61796, 85.83675, 86.05609, 
86.276, 86.496475, 86.71751, 86.9391, 87.16127, 87.384, 87.60731, 87.83118, 88.055626, 88.28065, 88.50623, 88.73241, 88.95916, 89.18648, 89.41439, 89.64288, 
89.87195, 90.101616, 90.33186, 90.562706, 90.79412, 91.02614, 91.25875, 91.49195, 91.72575, 91.96015, 92.195145, 92.43075, 92.66695, 92.903755, 93.14115, 93.379166, 
93.6178, 93.85702, 94.09687, 94.337326, 94.57839, 94.820076, 95.062386, 95.30531, 95.54885, 95.79302, 96.03782, 96.283226, 96.529274, 96.77594, 97.02324, 97.27119, 
97.51975, 97.76896, 98.01879, 98.26927, 98.52039, 98.772156, 99.02456, 99.2776, 99.531296, 99.785645, 100.04064, 100.29629, 100.55258, 100.80953, 101.06715, 101.32541, 
101.58434, 101.84393, 102.10419, 102.3651, 102.62669, 102.88894, 103.15186, 103.41546, 103.67973, 103.94467, 104.2103, 104.4766, 104.743576, 105.011246, 105.279594, 105.54862, 
105.818344, 106.08875, 106.359856, 106.631645, 106.90414, 107.17732, 107.4512, 107.725784, 108.00107, 108.277054, 108.55374, 108.831154, 109.10926, 109.38808, 109.66761, 109.94785, 
110.228806, 110.510506, 110.79291, 111.07601, 111.35987, 111.64444, 111.929726, 112.215775, 112.50252, 112.79001, 113.07824, 113.3672, 113.65689, 113.94735, 114.238525, 114.53044, 
114.82313, 115.11653, 115.4107, 115.705635, 116.001305, 116.29775, 116.59493, 116.892876, 117.191605, 117.491066, 117.7913, 118.09231, 118.39408, 118.696625, 118.999954, 119.30405, 
119.60891, 119.91456, 120.220985, 120.5282, 120.836205, 121.145, 121.45455, 121.76494, 122.076096, 122.388054, 122.7008, 123.01434, 123.32872, 123.64386, 123.95982, 124.276596, 
124.59416, 124.91255, 125.23177, 125.55178, 125.872604, 126.19428, 126.516754, 126.84004, 127.164185, 127.489136, 127.81492, 128.14156, 128.469, 128.7973, 129.12643, 129.45639, 
129.78722, 130.11888, 130.45137, 130.78474, 131.11896, 131.45401, 131.78993, 132.12671, 132.46434, 132.80286, 133.14221, 133.48245, 133.82355, 134.16553, 134.50836, 134.8521, 
135.1967, 135.5422, 135.88855, 136.2358, 136.58395, 136.93298, 137.28288, 137.63371, 137.98541, 138.33803, 138.69154, 139.04596, 139.40128, 139.7575, 140.11464, 140.47269, 
140.83167, 141.19154, 141.55234, 141.91406, 142.27672, 142.64027, 143.0048, 143.37022, 143.73662, 144.10391, 144.47215, 144.84135, 145.21149, 145.58253, 145.95457, 146.32755, 
146.70146, 147.07635, 147.4522, 147.829, 148.20677, 148.58548, 148.96518, 149.34586, 149.7275, 150.11009, 150.49371, 150.87827, 151.26385, 151.65038, 152.0379, 152.42645, 
152.81595, 153.20645, 153.59796, 153.99046, 154.38396, 154.77849, 155.17401, 155.57053, 155.96811, 156.36665, 156.76624, 157.16684, 157.56847, 157.9711, 158.3748, 158.77951, 
159.18527, 159.59204, 159.99986, 160.40875, 160.81865, 161.2296, 161.64162, 162.05467, 162.46878, 162.88397, 163.3002, 163.7175, 164.13588, 164.5553, 164.9758, 165.3974, 
165.82005, 166.24379, 166.66862, 167.09451, 167.52153, 167.9496, 168.37878, 168.80907, 169.24043, 169.67291, 170.1065, 170.5412, 170.97699, 171.41393, 171.85194, 172.29109, 
172.73138, 173.17278, 173.6153, 174.05898, 174.50375, 174.94968, 175.39676, 175.84497, 176.29434, 176.74484, 177.19647, 177.6493, 178.10327, 178.55838, 179.0147, 179.47215, 
179.93076, 180.39056, 180.85153, 181.31367, 181.77702, 182.24153, 182.70721, 183.17413, 183.64221, 184.11148, 184.58199, 185.05365, 185.52657, 186.00066, 186.47595, 186.9525, 
187.43024, 187.90916, 188.38939, 188.87079, 189.35341, 189.83731, 190.32242, 190.80876, 191.29637, 191.7852, 192.27528, 192.76665, 193.25923, 193.75308, 194.24821, 194.7446, 
195.24223, 195.74118, 196.24136, 196.74286, 197.24562, 197.74965, 198.255, 198.76161, 199.26952, 199.77876, 200.28926, 200.80109, 201.31424, 201.82866, 202.3444, 202.8615, 
203.37988, 203.8996, 204.42065, 204.94302, 205.46674, 205.9918, 206.51819, 207.04594, 207.57503, 208.10545, 208.63728, 209.17041, 209.70491, 210.24083, 210.77808, 211.31668, 
211.8567, 212.39807, 212.94083, 213.485, 214.03053, 214.57745, 215.12581, 215.67554, 216.22667, 216.77924, 217.33318, 217.88858, 218.44537, 219.00357, 219.56325, 220.12431, 
220.68681, 221.25078, 221.81615, 222.38295, 222.95126, 223.52098, 224.09215, 224.66483, 225.23894, 225.8145, 226.39157, 226.9701, 227.55008, 228.13159, 228.71455, 229.29903, 
229.88496, 230.4724, 231.06139, 231.65184, 232.24379, 232.83728, 233.43227, 234.02878, 234.62685, 235.2264, 235.82747, 236.43015, 237.03432, 237.64, 238.2473, 238.85611, 
239.46646, 240.07845, 240.69193, 241.307, 241.92363, 242.54184, 243.16167, 243.78304, 244.40598, 245.03055, 245.65671, 246.28445, 246.91382, 247.5448, 248.17734, 248.81157, 
249.44739, 250.08481, 250.72389, 251.3646, 252.00691, 252.65092, 253.29654, 253.94385, 254.59276, 255.24335, 255.89561, 256.54953, 257.2051, 257.8624, 258.5213, 259.18195, 
259.8443, 260.50827, 261.17398, 261.8414, 262.5105, 263.1813, 263.85388, 264.52814, 265.20407, 265.8818, 266.56125, 267.24243, 267.92535, 268.61, 269.29642, 269.9846, 
270.6745, 271.3662, 272.05963, 272.75485, 273.45187, 274.15063, 274.8512, 275.5536, 276.25772, 276.96365, 277.67145, 278.38098, 279.09238, 279.80557, 280.52057, 281.23743, 
281.95612, 282.67664, 283.399, 284.1232, 284.8492, 285.57718, 286.30692, 287.03854, 287.77206, 288.50745, 289.2447, 289.98383, 290.72485, 291.46774, 292.2126, 292.95932, 
293.70792, 294.45853, 295.21094, 295.96533, 296.72168, 297.4799, 298.2401, 299.00223, 299.76627, 300.53235, 301.30032, 302.07022, 302.8422, 303.61606, 304.3919, 305.1698, 
305.9496, 306.7314, 307.51526, 308.3011, 309.0889, 309.87878, 310.67065, 311.4645, 312.26047, 313.0584, 313.85843, 314.66043, 315.46454, 316.2707, 317.0789, 317.88913, 
318.7015, 319.5159, 320.33237, 321.151, 321.97165, 322.7944, 323.61932, 324.44626, 325.27536, 326.1066, 326.9399, 327.7754, 328.613, 329.45273, 330.29465, 331.13864, 
331.98483, 332.83325, 333.68375, 334.53644, 335.39133, 336.24838, 337.10764, 337.9691, 338.83273, 339.69858, 340.56668, 341.43698, 342.30945, 343.18423, 344.0612, 344.94037, 
345.82187, 346.7056, 347.59158, 348.47983, 349.37033, 350.26312, 351.15817, 352.0555, 352.9552, 353.85712, 354.76138, 355.66797, 356.5768, 357.48798, 358.40158, 359.3174, 
360.2356, 361.1562, 362.07907, 363.00433, 363.93198, 364.86197, 365.79434, 366.7291, 367.66623, 368.6058, 369.54773, 370.49203, 371.43884, 372.388, 373.3396, 374.29367, 
375.25012, 376.20905, 377.1704, 378.13422, 379.1005, 380.0693, 381.04053, 382.01422, 382.99045, 383.96915, 384.9503, 385.93408, 386.92026, 387.90906, 388.9003, 389.89407, 
390.89044, 391.8893, 392.89075, 393.89478, 394.90134, 395.91043, 396.9222, 397.93646, 398.95334, 399.97287, 400.99493, 402.01962, 403.047, 404.07693, 405.1095, 406.14474, 
407.1826, 408.22318, 409.26633, 410.31213, 411.36072, 412.41187, 413.46576, 414.52237, 415.5816, 416.64355, 417.7083, 418.7757, 419.84583, 420.91873, 421.99435, 423.0727, 
424.15387, 425.23773, 426.32437, 427.41382, 428.50604, 429.60107, 430.69888, 431.79947, 432.90295, 434.00916, 435.1182, 436.23016, 437.3449, 438.46246, 439.58295, 440.70633, 
441.83243, 442.96155, 444.0935, 445.22827, 446.36606, 447.50677, 448.65024, 449.79675, 450.94623, 452.09848, 453.2538, 454.41217, 455.57324, 456.73746, 457.90466, 459.07474, 
460.24786, 461.42404, 462.6031, 463.78528, 464.9705, 466.1586, 467.34982, 468.54416, 469.7414, 470.94186, 472.14532, 473.35178, 474.5614, 475.77417, 476.98984, 478.20883, 
479.4309, 480.6559, 481.88425, 483.11572, 484.3502, 485.58795, 486.82886, 488.07297, 489.32013, 490.5706, 491.82425, 493.08093, 494.341, 495.6043, 496.87067, 498.14047, 
499.41348, 500.68954, 501.96906, 503.25186, 504.53778, 505.82712, 507.11978, 508.41556, 509.71484, 511.0174, 512.3232, 513.6324, 514.945, 516.2608, 517.5801, 518.9028, 
520.2287, 521.55817, 522.89105, 524.2271, 525.5668, 526.90985, 528.2562, 529.6062, 530.95966, 532.3163, 533.67664, 535.0405, 536.4076, 537.7784, 539.1528, 540.53033, 
541.9117, 543.2966, 544.685, 546.0767, 547.4723, 548.87134, 550.2738, 551.68005, 553.0899, 554.5031, 555.92017, 557.3408, 558.76495, 560.19293, 561.6245, 563.0595, 
564.4984, 565.94104, 567.38715, 568.83704, 570.2908, 571.7479, 573.2091, 574.67395, 576.14233, 577.6147, 579.09076, 580.5705, 582.05414, 583.54156, 585.03265, 586.5277, 
588.0266, 589.5291, 591.0357, 592.5461, 594.0601, 595.5783, 597.1003, 598.626, 600.15576, 601.6895, 603.2271, 604.7685, 606.31396, 607.86346, 609.4167, 610.97406, 
612.5354, 614.1005, 615.6699, 617.2433, 618.8204, 620.4018, 621.9873, 623.5766, 625.17017, 626.76776, 628.36926, 629.9751, 631.585, 633.1988, 634.81696, 636.4393, 
638.0655, 639.6961, 641.3308, 642.9696, 644.61273, 646.26, 647.9113, 649.5671, 651.22705, 652.89105, 654.5596, 656.2323, 657.9091, 659.5904, 661.276, 662.9657, 
664.6599, 666.35846, 668.06134, 669.7684, 671.48, 673.1959, 674.91614, 676.64087, 678.37006, 680.1034, 681.84143, 683.58386, 685.33057, 687.082, 688.83777, 690.5979, 
692.3628, 694.1321, 695.90576, 697.68414, 699.4671, 701.25433, 703.04645, 704.8431, 706.6441, 708.44995, 710.26044, 712.07526, 713.895, 715.7193, 717.54816, 719.38184, 
721.2202, 723.0631, 724.91095, 726.7634, 728.6204, 730.4825, 732.3492, 734.2205, 736.09686, 737.97797, 739.86365, 741.7544, 743.64996, 745.55035, 747.4554, 749.3655, 
751.2805, 753.2002, 755.125, 757.05475, 758.9892, 760.9288, 762.8734, 764.8227, 766.77716, 768.7367, 770.701, 772.6705, 774.6451, 776.62445, 778.60913, 780.5989, 
782.59344, 784.5934, 786.59845, 788.60834, 790.62366, 792.6441, 794.6695, 796.70026, 798.73627, 800.77716, 802.82355, 804.87524, 806.9318, 808.99396, 811.06134, 813.1338, 
815.21173, 817.29504, 819.38336, 821.4773, 823.57666, 825.6813, 827.7911, 829.90656, 832.02734, 834.1534, 836.2851, 838.42224, 840.5645, 842.7126, 844.86615, 847.025, 
849.1896, 851.3597, 853.5351, 855.7163, 857.9031, 860.0952, 862.2932, 864.4968, 866.70575, 868.92065, 871.14124, 873.3671, 875.59906, 877.8367, 880.0797, 882.3288, 
884.58356, 886.8439, 889.11017, 891.3823, 893.66, 895.9437, 898.2334, 900.5285, 902.8299, 905.137, 907.4498, 909.76886, 912.09375, 914.4246, 916.76117, 919.104, 
921.45276, 923.80725, 926.1681, 928.535, 930.9075, 933.2865, 935.6715, 938.0624, 940.45953, 942.86285, 945.2721, 947.68774, 950.1097, 952.53735, 954.97156, 957.41205, 
959.8584, 962.3113, 964.77057, 967.2357, 969.7075, 972.1856, 974.66974, 977.1606, 979.6577, 982.16095, 984.6709, 987.1872, 989.7096, 992.2389, 994.7745, 997.31635, 
999.8651, 1002.4202, 1004.98157, 1007.54987, 1010.1247, 1012.70575, 1015.29376, 1017.88837, 1020.48956, 1023.09705, 1025.7117, 1028.3329, 1030.9604, 1033.5951, 1036.2366, 1038.8843, 
1041.5391, 1044.2008, 1046.869, 1049.5442, 1052.2264, 1054.915, 1057.6108, 1060.3136, 1063.023, 1065.7395, 1068.4631, 1071.1932, 1073.9307, 1076.675, 1079.4261, 1082.1847, 
1084.9502, 1087.7225, 1090.5022, 1093.289, 1096.0825, 1098.8837, 1101.6919, 1104.5068, 1107.3295, 1110.1592, 1112.996, 1115.8402, 1118.6918, 1121.5503, 1124.4165, 1127.2899, 
1130.1707, 1133.0585, 1135.954, 1138.857, 1141.767, 1144.6848, 1147.6101, 1150.5424, 1153.4827, 1156.4304, 1159.3853, 1162.3481, 1165.3186, 1168.2961, 1171.2817, 1174.275, 
1177.2755, 1180.284, 1183.3003, 1186.3239, 1189.3556, 1192.395, 1195.4418, 1198.4967, 1201.5596, 1204.6298, 1207.7083, 1210.7946, 1213.8884, 1216.9905, 1220.1005, 1223.2181, 
1226.3441, 1229.478, 1232.6195, 1235.7697, 1238.9276, 1242.0934, 1245.2676, 1248.4498, 1251.6403, 1254.8385, 1258.0452, 1261.2601, 1264.4829, 1267.7142, 1270.9541, 1274.2015, 
1277.4578, 1280.7223, 1283.9948, 1287.2761, 1290.5658, 1293.8634, 1297.1699, 1300.4849, 1303.8079, 1307.1398, 1310.4801, 1313.8287, 1317.1863, 1320.5524, 1323.9265, 1327.3099, 
1330.7019, 1334.102, 1337.5115, 1340.9294, 1344.3558, 1347.7913, 1351.2356, 1354.6882, 1358.1501, 1361.6211, 1365.1002, 1368.5887, 1372.0862, 1375.5922, 1379.1075, 1382.6318, 
};
	
#define FREQUENCY(pitch) pgm_read_float_near(&pitches[pitch]);

float drawbarFrequencies[9] = { 0.5, 1.0, 1.5, 2.0, 3.0, 4.0, 5.0, 6.0, 8.0 };

// These are the amplitudes of each of the drawbar stop positions (0...8).
// Each additional stop increases by 3db.  I think I have this right?  Not sure.
// We are int8_t, not uin8_t, so we can multiply faster against oscils, which is
// also int8_t.
uint8_t drawBarAmplitudes[9] = 
	{
	0, 7, 18, 32, 48, 65, 85, 105, 127
	};

void setup()
{
//Serial.begin(9600);
  startMozzi();
  // Fire up the leslie
#ifdef LESLIE_ON  
  leslie.setFreq((float)LESLIE_FREQUENCY);
#endif

// precompute the drawbars so we don't have to compute them during updateAudio()
for(uint8_t i = 0; i < NUM_DRAWBAR_SELECTIONS; i++)
	{
	for(uint8_t j = 0; j < 9; j++)
		{
		drawbars[i][j] = drawBarAmplitudes[drawbars[i][j]];
		}
	}
}

void loop()
{
  audioHook();
}


#define CV_POT_IN1    A2    // Organ Selection
#define CV_POT_IN2    A1    // Pitch Tune
#define CV_POT3       A0    // Gain
#define CV_IN3        A3    // Pitch
#define CV_AUDIO_IN   A4    // [Unused]
#define CV_AUDIO_OUT  9     // Out
#define CV_GATE_OUT   8     // [Unused]

// Median-Of-Three Filter for Pitch, dunno if we need it
#define MEDIAN_OF_THREE(a,b,c) (((a) <= (b)) ? (((b) <= (c)) ? (b) : (((a) < (c)) ? (c) : (a))) : (((a) <= (c)) ? (a) : (((b) < (c)) ? (c) : (b))))
uint16_t inA = 0;
uint16_t inB = 0;
uint16_t pitchCV;
uint16_t tuneCV;
uint16_t pitch;
uint8_t organ = 0;	// Current index into the drawbars array
uint16_t gain;		// our current gain

void updateControl()                          
{
	uint16_t in = mozziAnalogRead(CV_IN3);
	// let's try a median of three filter to reduce some of the jumpiness
	uint16_t pitchCV = MEDIAN_OF_THREE(in, inA, inB);
	inA = inB;
	inB = in;
	tuneCV = (tuneCV * 3 + mozziAnalogRead(CV_POT_IN2)) >> 2;
	pitch = (pitch * 3 + pitchCV + (tuneCV >> 1)) >> 2;

	
	// convert to frequency.  This oughta be a lookup table
	// INCREDIBLY, pow is almost cheap enough to use here
	// float frequency = pow(2.0, pitch * ( 45.2 / 1023.0 / 12.0)) * 65.41;		// 27.50
	float frequency = FREQUENCY(pitch);

	// leslie!
#ifdef LESLIE_ON
	int8_t les = leslie.next();
	frequency += les * (1.0 / (64 - LESLIE_PITCH));
#endif

	// set the drawbars
  for(uint8_t i = 0; i < 9; i++)
  	{
  	oscils[i].setFreq((frequency * drawbarFrequencies[i]));
  	}

	// determine the gain				FIXME This looks too big
	gain = 1 + mozziAnalogRead(CV_POT3)
#ifdef LESLIE_ON
   + (les >> (8 - LESLIE_VOLUME))
#endif
;

	// what organ are we playing?
  organ = (organ + (mozziAnalogRead(CV_POT_IN1) * NUM_DRAWBAR_SELECTIONS)) >> 10;
  }                                             


int updateAudio()                             
{ 
  uint8_t* d = drawbars[organ];
  int32_t val = 0;
  for(uint8_t i = 0; i < 9; i++)
  	{
	  val += (oscils[i].next() * d[i]);
  	}
  return ((val * gain) >> 16) ;
}
