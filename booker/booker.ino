// Copyright 2023 Sean Luke
// (sean@cs.gmu.edu)
//
// Released under the Apache 2.0 License
//
// WARNING: Mozzi itself is released under a broken non-open-source license, namely the 
// Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
// This license is not compatible with the LGPL (used by the Arduino itself!) and is
// also viral, AND is non-commercial only.  What a mess.  I am pushing them to change 
// their license to something reasonable like Apache or GPL but in the meantime I don't 
// have much choice but to turn my head and ignore the broken license.  So I'm releasing
// under Apache for the time being.


/// BOOKER
///
/// Booker is a Hammond Organ simulator, complete with Leslie.  It is meant to run on the 
/// AE Modular GRAINS, but it could be  adapted to any Arduino.  
///
/// SET GRAINS TO MOZZI MODE.  Sorry, no Grains mode.
///
/// You will need to install the Mozzi Library.  You can do this from the Library Manager
/// in your Arduino IDE.
///
/// NOTE: Probably due to the voltage divider on all of its analog inputs, GRAINS is limited
/// to about a 45 note range.  
///
/// NOTE: At extremely high frequencies, a few of Booker's drawbars will go over Nyquist and
/// you may hear some antialiasing effects.  I can fix this but it puts me over the
/// computational budget of the device, so it's not going to happen.
///
/// Booker comes with a Leslie, which is on by default:


//#define LESLIE_ON		// To turn this off, put a // before the #define, as in //#define

// Leslie changes both the amplitude and pitch at a certain rate.
// You can adjust them here

#define LESLIE_FREQUENCY 5.66			// This is the 450 speed.  The classic slower speed is 0.66, but it's too slow
#define LESLIE_VOLUME 2					// Values are 0 (off), 1, 2, 3, 4, 5, 6, 7, or 8 (max).
#define LESLIE_PITCH 5					// Values are 0.0 (none) ... 63.0 (max).  Can be floating point.

/// CONFIGURATION
///
/// IN 1            [Unused]
/// IN 2            [Unused]
/// IN 3            Pitch CV	[This isn't IN2, like Pitch Tune, because Pitch Tune must be +/-]
/// AUDIO IN (A)    [Unused]
/// AUDIO OUT       Out
/// DIGITAL OUT (D) [Unused]
///
/// POT 1           Choice of Organ [Set the switch to MAN]
///
/// POT 2           Pitch Tune  [Set the switch to MAN]
///
/// POT 3           Volume

/// Lastly, here is our present drawbar selection.  Keep this to no more than 31 but feel free
/// to change the selections.  There is a big list of 99 selections below you could swap in.

#define NUM_DRAWBAR_SELECTIONS 16
int8_t drawbars[NUM_DRAWBAR_SELECTIONS][9] = 
{
    { 8, 8, 8, 8, 8, 8, 8, 8, 8 },    // 888888888 Full Organ
    { 8, 8, 5, 3, 2, 4, 5, 8, 8 },    // 885324588 Blues
    { 8, 8, 8, 8, 0, 0, 0, 0, 0 },    // 888800000 Booker T. Jones 1
    { 8, 8, 8, 6, 3, 0, 0, 0, 0 },    // 888630000 Booker T. Jones 2
    { 8, 7, 8, 0, 0, 0, 4, 5, 6 },    // 878000456 Bright Comping
    { 8, 4, 3, 0, 0, 0, 0, 0, 0 },    // 843000000 Dark Comping
    { 8, 0, 8, 8, 0, 8, 0, 0, 8 },    // 808808008 Gospel 1
    { 8, 8, 8, 0, 0, 0, 0, 0, 8 },    // 888000008 Gospel 2
    { 8, 6, 8, 6, 6, 6, 5, 6, 8 },    // 868666568 Greg Allman 1
    { 8, 8, 8, 6, 0, 0, 0, 0, 0 },    // 888600000 Greg Allman 2
    { 8, 8, 6, 8, 0, 0, 3, 0, 0 },    // 886800300 Paul Shaffer 1
    { 8, 8, 8, 7, 6, 8, 8, 8, 8 },    // 888768888 Paul Shaffer 2
    { 8, 8, 8, 8, 7, 8, 6, 7, 8 },    // 888878678 Paul Shaffer 3
    { 8, 0, 8, 0, 0, 0, 0, 0, 8 },    // 808000008 Reggae
    { 0, 8, 0, 0, 0, 0, 0, 0, 0 },    // 080000000 Sine
    { 8, 7, 6, 5, 4, 3, 2, 1, 1 },    // 876543211 Strings
};

/** Here is a collection of Drawbar Selections for you.
	You can find more online.
	
    { 0, 0, 7, 7, 4, 0, 0, 3, 4 },    // 007740034 Alone in the City
    { 8, 8, 7, 7, 2, 4, 1, 1, 0 },    // 887724110 America (Gospel) (U)
    { 0, 0, 6, 6, 0, 6, 0, 0, 0 },    // 006606000 America (Gospel) (L)
    { 8, 8, 5, 3, 2, 4, 5, 8, 8 },    // 885324588 Blues
    { 8, 8, 8, 8, 0, 0, 0, 0, 0 },    // 888800000 Booker T. Jones 1
    { 8, 8, 8, 6, 3, 0, 0, 0, 0 },    // 888630000 Booker T. Jones 2
    { 8, 8, 8, 8, 0, 8, 0, 0, 8 },    // 888808008 Born to B3 (Gospel) (U)
    { 0, 0, 7, 7, 2, 5, 4, 0, 0 },    // 007725400 Born to B3 (Gospel) (L)
    { 8, 8, 8, 1, 1, 0, 0, 0, 0 },    // 888110000 Brian Auger 1
    { 8, 8, 8, 8, 0, 5, 0, 0, 0 },    // 888805000 Brian Auger 2
    { 8, 7, 8, 0, 0, 0, 4, 5, 6 },    // 878000456 Bright Comping
    { 8, 0, 0, 0, 0, 0, 8, 8, 8 },    // 800000888 Brother Jack
    { 8, 4, 3, 0, 0, 0, 0, 0, 0 },    // 843000000 Dark Comping
    { 8, 8, 8, 8, 8, 8, 8, 8, 8 },    // 888888888 Dark Solo A (U)
    { 6, 6, 2, 0, 0, 0, 0, 0, 0 },    // 662000000 Dark Solo A (L)
    { 8, 2, 8, 2, 0, 0, 0, 0, 2 },    // 828200002 Dark Solo B (U)
    { 6, 0, 6, 0, 0, 0, 0, 0, 0 },    // 606000000 Dark Solo B (L)
    { 8, 8, 8, 0, 0, 0, 8, 8, 8 },    // 888000888 Fat
    { 0, 8, 0, 0, 8, 0, 8, 8, 3 },    // 080080883 Fifth Organ (Gospel) (U)
    { 0, 0, 8, 8, 0, 6, 0, 0, 0 },    // 008806000 Fifth Organ (Gospel) (L)
    { 0, 0, 6, 8, 0, 2, 0, 0, 0 },    // 006802000 Flutes
    { 8, 8, 8, 6, 6, 6, 8, 8, 8 },    // 888666888 Full and High
    { 8, 6, 8, 8, 6, 8, 0, 6, 8 },    // 868868068 Full and Sweet
    { 8, 8, 8, 8, 8, 8, 8, 8, 8 },    // 888888888 Full Organ
    { 6, 8, 8, 6, 0, 0, 0, 0, 4 },    // 688600004 Funky Comping
    { 8, 8, 8, 8, 0, 0, 0, 0, 0 },    // 888800000 Gimme Some Loving
    { 8, 0, 8, 8, 0, 8, 0, 0, 8 },    // 808808008 Gospel 1
    { 8, 8, 8, 0, 0, 0, 0, 0, 8 },    // 888000008 Gospel 2
    { 8, 6, 8, 6, 6, 6, 5, 6, 8 },    // 868666568 Greg Allman 1
    { 8, 8, 8, 6, 0, 0, 0, 0, 0 },    // 888600000 Greg Allman 2
    { 8, 8, 6, 0, 0, 0, 0, 4, 0 },    // 886000040 Greg Allman 3
    { 8, 8, 8, 8, 0, 0, 0, 8, 8 },    // 888800088 Greg Rolie 1
    { 8, 8, 6, 4, 0, 0, 0, 0, 0 },    // 886400000 Greg Rolie 2
    { 8, 8, 8, 8, 8, 6, 6, 6, 6 },    // 888886666 Greg Rolie 4
    { 8, 8, 8, 4, 2, 0, 0, 8, 0 },    // 888420080 Groove Holmes (Gospel) (U)
    { 0, 0, 0, 5, 0, 5, 0, 0, 0 },    // 000505000 Groove Holmes (Gospel) (L)
    { 8, 8, 0, 0, 0, 0, 0, 0, 0 },    // 880000000 House Bass (Gospel) (U)
    { 0, 0, 8, 0, 8, 0, 0, 0, 0 },    // 008080000 House Bass (Gospel) (L)
    { 8, 6, 8, 6, 0, 0, 0, 0, 6 },    // 868600006 Jimmy McGriff 1
    { 8, 8, 3, 2, 0, 0, 1, 2, 5 },    // 883200125 Jimmy McGriff 2 (Gospel) (U)
    { 4, 4, 8, 6, 5, 0, 0, 0, 0 },    // 448650000 Jimmy McGriff 2 (Gospel) (L)
    { 8, 8, 8, 8, 8, 8, 8, 8, 8 },    // 888888888 Jimmy Smith 1 (U)
    { 0, 0, 7, 5, 0, 0, 0, 0, 0 },    // 007500000 Jimmy Smith 1 (L)
    { 8, 8, 8, 0, 0, 0, 0, 0, 0 },    // 888000000 Jimmy Smith 2 (U)
    { 8, 3, 8, 0, 0, 0, 0, 0, 0 },    // 838000000 Jimmy Smith 2 (L)
    { 8, 8, 8, 0, 0, 0, 0, 0, 0 },    // 888000000 Jimmy Smith 3 (U)
    { 8, 0, 8, 0, 0, 0, 0, 0, 0 },    // 808000000 Jimmy Smith 3 (L)
    { 8, 8, 8, 4, 0, 0, 0, 8, 0 },    // 888400080 Joey DeFrancesco
    { 8, 8, 4, 4, 0, 0, 0, 0, 0 },    // 884400000 Jon Lord
    { 8, 8, 0, 0, 6, 0, 0, 0, 0 },    // 880060000 Latin (Gospel) (U)
    { 0, 0, 6, 6, 7, 6, 0, 0, 0 },    // 006676000 Latin (Gospel) (L)
    { 8, 0, 0, 8, 0, 8, 0, 0, 0 },    // 800808000 Matthew Fisher
    { 8, 6, 8, 8, 0, 0, 0, 0, 4 },    // 868800004 Melvin Crispel
    { 8, 0, 3, 6, 0, 0, 0, 0, 0 },    // 803600000 Mellow
    { 0, 0, 7, 8, 0, 0, 4, 5, 3 },    // 007800453 Meditation Time (Gospel) (U)
    { 0, 0, 6, 7, 0, 0, 5, 4, 0 },    // 006700540 Meditation Time (Gospel) (L)
    { 8, 8, 6, 8, 0, 0, 3, 0, 0 },    // 886800300 Paul Shaffer 1
    { 8, 8, 8, 7, 6, 8, 8, 8, 8 },    // 888768888 Paul Shaffer 2
    { 8, 8, 8, 8, 7, 8, 6, 7, 8 },    // 888878678 Paul Shaffer 3
    { 8, 5, 0, 0, 0, 5, 0, 0, 0 },    // 850005000 Pink Floyd
    { 8, 8, 8, 8, 0, 0, 0, 0, 0 },    // 888800000 Power Chords
    { 8, 8, 8, 8, 0, 0, 0, 0, 0 },    // 888800000 Progessive (Gospel) (U)
    { 0, 0, 8, 8, 8, 4, 0, 0, 0 },    // 008884000 Progessive (Gospel) (L)
    { 0, 0, 6, 8, 7, 6, 4, 0, 0 },    // 006876400 Ray Charles
    { 8, 0, 8, 0, 0, 0, 0, 0, 8 },    // 808000008 Reggae
    { 8, 8, 8, 8, 0, 0, 0, 0, 0 },    // 888800000 Rock, R&B (U)
    { 8, 4, 8, 0, 0, 0, 0, 0, 0 },    // 848000000 Rock, R&B (L)
    { 8, 0, 0, 3, 8, 8, 8, 8, 8 },    // 800388888 Screaming (Gospel) (U)
    { 0, 0, 7, 0, 3, 3, 3, 3, 3 },    // 007033333 Screaming (Gospel) (L)
    { 0, 0, 8, 8, 8, 8, 8, 0, 0 },    // 008888800 Shirley Scott
    { 8, 3, 0, 0, 0, 0, 3, 7, 8 },    // 830000378 Simmering
    { 0, 8, 0, 0, 0, 0, 0, 0, 0 },    // 080000000 Sine
    { 8, 7, 6, 5, 5, 6, 7, 8, 8 },    // 876556788 Shouting 1
    { 6, 6, 8, 8, 4, 8, 5, 8, 8 },    // 668848588 Shouting 2
    { 8, 7, 8, 6, 4, 5, 4, 6, 6 },    // 878645466 Shouting 3 (Gospel) (U)
    { 8, 8, 8, 8, 0, 0, 0, 0, 0 },    // 888800000 Shouting 3 (Gospel) (L)
    { 0, 0, 8, 4, 0, 0, 0, 0, 0 },    // 008400000 Slow Balllad
    { 0, 6, 8, 8, 4, 0, 0, 0, 3 },    // 068840003 Slowly
    { 8, 8, 8, 7, 0, 0, 0, 0, 0 },    // 888700000 Soft Backing (Gospel) (U)
    { 5, 5, 5, 4, 0, 0, 0, 0, 0 },    // 555400000 Soft Backing (Gospel) (L)
    { 8, 0, 8, 4, 0, 0, 0, 0, 8 },    // 808400008 Soft Chords
    { 6, 7, 8, 4, 0, 4, 2, 3, 1 },    // 678404231 Speaker Talking (Gospel) (U)
    { 0, 0, 6, 6, 0, 2, 0, 2, 4 },    // 006602024 Speaker Talking (Gospel) (L)
    { 8, 8, 8, 6, 4, 3, 2, 0, 0 },    // 888643200 Steppenwolf
    { 8, 8, 8, 8, 7, 6, 7, 8, 8 },    // 888876788 Steve Winwood
    { 8, 7, 6, 5, 4, 3, 2, 1, 1 },    // 876543211 Strings
    { 0, 0, 8, 0, 0, 0, 0, 0, 0 },    // 008000000 Sweet
    { 7, 8, 7, 7, 4, 6, 0, 4, 6 },    // 787746046 Testimony Service  (Gospel) (U)
    { 0, 0, 8, 8, 0, 0, 6, 7, 3 },    // 008800673 Testimony Service  (Gospel) (L)
    { 8, 7, 8, 6, 5, 6, 4, 6, 7 },    // 878656467 Theatre Organ (Gospel) (U)
    { 0, 0, 8, 8, 4, 4, 0, 0, 0 },    // 008844000 Theatre Organ (Gospel) (L)
    { 8, 8, 8, 8, 0, 0, 0, 0, 0 },    // 888800000 Tom Coster
    { 8, 0, 0, 0, 0, 0, 0, 0, 8 },    // 800000008 Whistle 1
    { 8, 8, 8, 0, 0, 0, 0, 0, 8 },    // 888000008 Whistle 2
    { 6, 8, 8, 6, 0, 0, 0, 0, 0 },    // 688600000 Whiter Shade Of Pale 1 (U)
    { 8, 8, 0, 0, 7, 0, 7, 7, 0 },    // 880070770 Whiter Shade Of Pale 1 (L)
    { 8, 8, 8, 8, 0, 8, 0, 0, 6 },    // 888808006 Whiter Shade Of Pale 2 (U)
    { 0, 0, 4, 4, 4, 0, 0, 0, 0 },    // 004440000 Whiter Shade Of Pale 2 (L)
    { 8, 6, 6, 8, 0, 0, 0, 0, 0 },    // 866800000 Wide Leslie
*/    



// ADJUSTING TRACKING

// Grains can only do about 3.75 octaves due to its circuit design.  I have positioned 
// it to start at the C two octaves below middle C.  For the same reason, I have to 
// "stretch" Grains from 3.75V to 5V, so to speak, in software.  I have tuned this 
// stretch for my own Grains, but if Booker is tracking poorly in your Grains, get with 
// me and we might be able to customize it for you.
//
// In short, you can play with the function that has "pow(...)" in it below to get the
// tracking you need.  65.41 is the frequency two octaves below middle C.  45.2 is the
// stretch factor appropriate for my grains -- higher is more stretched.  60 is a full
// 5V, 5-octave (60 note) stretch.  You might need to stretch or decrease by just a tad,
// like .1 or .2.  I don't know how consistent Grains' internal resistors are from unit
// to unit.
//
// Once you have a desired base frequency and stretch value, you could pump out all the
// values from 0 to 1023 and put them into the "pitch[]" table.  I use some lisp code
// as below but you can choose whatever language suits your fancy.  :-)  Then use the
// FREQUENCIES macro instead of the pow() function, it's significantly faster.



#define CONTROL_RATE 128			// More than this and we're gonna get clicks probably

#include <MozziGuts.h>
#include <Oscil.h>
#include <tables/sin256_int8.h>

/// OSCILLATORS

Oscil<SIN256_NUM_CELLS, AUDIO_RATE> tonewheel1(SIN256_DATA);
Oscil<SIN256_NUM_CELLS, AUDIO_RATE> tonewheel2(SIN256_DATA);
Oscil<SIN256_NUM_CELLS, AUDIO_RATE> tonewheel3(SIN256_DATA);
Oscil<SIN256_NUM_CELLS, AUDIO_RATE> tonewheel4(SIN256_DATA);
Oscil<SIN256_NUM_CELLS, AUDIO_RATE> tonewheel5(SIN256_DATA);
Oscil<SIN256_NUM_CELLS, AUDIO_RATE> tonewheel6(SIN256_DATA);
Oscil<SIN256_NUM_CELLS, AUDIO_RATE> tonewheel7(SIN256_DATA);
Oscil<SIN256_NUM_CELLS, AUDIO_RATE> tonewheel8(SIN256_DATA);
Oscil<SIN256_NUM_CELLS, AUDIO_RATE> tonewheel9(SIN256_DATA);

Oscil<SIN256_NUM_CELLS, AUDIO_RATE> oscils[9] = 
	{ 
	tonewheel1, tonewheel2, tonewheel3,
	tonewheel4, tonewheel5, tonewheel6, 
	tonewheel7, tonewheel8, tonewheel9 
	};

#ifdef LESLIE_ON
Oscil<SIN256_NUM_CELLS, CONTROL_RATE> leslie(SIN256_DATA);		// Leslie LFO
#endif
	
// This has custom tracking for my Grains module.  To change the base note, you need to specify
// its frequency (I have 65.41, C two octaves below middle C).  And to "stretch" it, you need to
// change 44.5 to something else -- bigger is more stretched, and 60 would be perfectly 5V.  :-(
//
// (dotimes (p (+ 512 1024)) 
//	(format t "~a, " (* 27.50 (expt 2.0 (* p 44.5 1/1023 1/12))))
//	(when (= 15 (mod p 16)) (terpri)))
//
// I can't explain why it's 75% (45.0 vs 60.0)

// A0 and up. Thus C will be centered on the pitch knob.
PROGMEM const float pitches[1024+512] = {
27.5, 27.569183, 27.638542, 27.708075, 27.777782, 27.847666, 27.917725, 27.987959, 28.058372, 28.12896, 28.199728, 28.270672, 28.341793, 28.413095, 28.484577, 28.55624, 
28.62808, 28.700104, 28.772306, 28.84469, 28.91726, 28.99001, 29.06294, 29.136059, 29.209358, 29.282843, 29.356512, 29.430368, 29.504408, 29.578634, 29.653048, 29.72765, 
29.802437, 29.877415, 29.952578, 30.027935, 30.10348, 30.179213, 30.255135, 30.331253, 30.40756, 30.484058, 30.56075, 30.637634, 30.714712, 30.791985, 30.86945, 30.947111, 
31.024967, 31.10302, 31.181269, 31.259712, 31.338356, 31.417198, 31.496237, 31.575474, 31.654911, 31.734549, 31.814384, 31.894423, 31.974665, 32.055107, 32.13575, 32.2166, 
32.297646, 32.3789, 32.460358, 32.542023, 32.62389, 32.705963, 32.788246, 32.870735, 32.95343, 33.036335, 33.11945, 33.202766, 33.2863, 33.37004, 33.453995, 33.538155, 
33.62253, 33.70712, 33.79192, 33.87693, 33.96216, 34.0476, 34.13326, 34.219128, 34.305218, 34.39152, 34.478046, 34.564785, 34.651745, 34.73892, 34.826313, 34.91393, 
35.001766, 35.089825, 35.1781, 35.266605, 35.355328, 35.44427, 35.533443, 35.622837, 35.712456, 35.802303, 35.892372, 35.98267, 36.073196, 36.163948, 36.25493, 36.346138, 
36.437576, 36.529247, 36.621147, 36.71328, 36.80564, 36.898235, 36.991066, 37.084126, 37.17742, 37.27095, 37.36472, 37.45872, 37.552956, 37.647434, 37.74215, 37.8371, 
37.93229, 38.027718, 38.123386, 38.2193, 38.31545, 38.411842, 38.50848, 38.60536, 38.702484, 38.799847, 38.89746, 38.99532, 39.093422, 39.191772, 39.290375, 39.38922, 
39.488316, 39.587658, 39.687252, 39.787098, 39.88719, 39.98754, 40.08814, 40.188995, 40.2901, 40.391464, 40.49308, 40.59495, 40.69708, 40.799465, 40.902107, 41.00501, 
41.10817, 41.21159, 41.31527, 41.41921, 41.52341, 41.627876, 41.7326, 41.837593, 41.942844, 42.048367, 42.154152, 42.2602, 42.36652, 42.473106, 42.57996, 42.68708, 
42.79447, 42.902138, 43.010067, 43.11827, 43.22675, 43.3355, 43.44452, 43.553818, 43.66339, 43.773235, 43.88336, 43.993763, 44.104443, 44.215397, 44.326637, 44.438152, 
44.54995, 44.66203, 44.77439, 44.88703, 44.999958, 45.113167, 45.226665, 45.340446, 45.45451, 45.568867, 45.683506, 45.798435, 45.913654, 46.029167, 46.144966, 46.261055, 
46.37744, 46.494118, 46.611084, 46.728348, 46.845905, 46.963764, 47.081913, 47.200363, 47.319107, 47.438152, 47.557495, 47.67714, 47.797085, 47.917336, 48.037884, 48.158737, 
48.279896, 48.401356, 48.523125, 48.645195, 48.767582, 48.890266, 49.013268, 49.136574, 49.260193, 49.384117, 49.508358, 49.63291, 49.757774, 49.882957, 50.008453, 50.134262, 
50.26039, 50.386837, 50.5136, 50.640682, 50.76808, 50.8958, 51.023846, 51.15221, 51.2809, 51.409912, 51.539246, 51.668907, 51.798897, 51.92921, 52.059856, 52.190826, 
52.32213, 52.45376, 52.585724, 52.718018, 52.850643, 52.98361, 53.1169, 53.250534, 53.3845, 53.518806, 53.653442, 53.788425, 53.923744, 54.059406, 54.195408, 54.331753, 
54.46844, 54.605473, 54.742847, 54.88057, 55.018635, 55.157055, 55.29582, 55.434925, 55.57439, 55.714207, 55.854366, 55.994892, 56.135757, 56.276985, 56.418568, 56.5605, 
56.702797, 56.845448, 56.988457, 57.131836, 57.275562, 57.419655, 57.564114, 57.708935, 57.854115, 57.999664, 58.145576, 58.29186, 58.43851, 58.585526, 58.73292, 58.88068, 
59.028805, 59.17732, 59.32619, 59.47545, 59.625072, 59.775074, 59.92546, 60.076214, 60.227356, 60.378876, 60.530777, 60.68306, 60.835728, 60.988777, 61.142212, 61.296036, 
61.450237, 61.60484, 61.759823, 61.91519, 62.07096, 62.227116, 62.383667, 62.54061, 62.69795, 62.85569, 63.01382, 63.172344, 63.33128, 63.490604, 63.650333, 63.810463, 
63.970997, 64.131935, 64.293274, 64.455025, 64.61718, 64.77975, 64.94271, 65.1061, 65.26989, 65.4341, 65.59872, 65.76375, 65.92919, 66.09506, 66.26134, 66.42805, 
66.59516, 66.762695, 66.93066, 67.099045, 67.267845, 67.43709, 67.60674, 67.776825, 67.94734, 68.11827, 68.28966, 68.46146, 68.63369, 68.80635, 68.97946, 69.15299, 
69.32697, 69.50138, 69.67623, 69.85152, 70.02725, 70.20343, 70.38005, 70.557106, 70.73462, 70.91257, 71.090965, 71.26982, 71.44912, 71.62887, 71.809074, 71.98973, 
72.17084, 72.35241, 72.534424, 72.71691, 72.89985, 73.08325, 73.26711, 73.45144, 73.63623, 73.82148, 74.0072, 74.19338, 74.38004, 74.56717, 74.75476, 74.942825, 
75.13137, 75.32038, 75.50987, 75.69984, 75.89029, 76.08121, 76.27261, 76.4645, 76.65686, 76.849724, 77.04305, 77.23688, 77.43119, 77.62599, 77.82128, 78.017075, 
78.21334, 78.41011, 78.607376, 78.80513, 79.003395, 79.20215, 79.4014, 79.601166, 79.80142, 80.00218, 80.20345, 80.40523, 80.607506, 80.8103, 81.0136, 81.217415, 
81.421745, 81.62658, 81.83194, 82.0378, 82.244194, 82.45111, 82.65854, 82.866486, 83.07497, 83.28396, 83.49349, 83.70354, 83.914116, 84.12524, 84.33687, 84.54904, 
84.76176, 84.975, 85.188774, 85.40309, 85.61795, 85.83335, 86.04928, 86.26576, 86.48279, 86.70036, 86.91848, 87.13716, 87.35637, 87.57613, 87.79647, 88.01734, 
88.23878, 88.46077, 88.68331, 88.906425, 89.1301, 89.354324, 89.579124, 89.80448, 90.03041, 90.25691, 90.48398, 90.711624, 90.93983, 91.16861, 91.39798, 91.627914, 
91.85843, 92.08952, 92.3212, 92.55346, 92.786316, 93.01974, 93.25376, 93.488365, 93.72356, 93.95935, 94.19573, 94.43271, 94.67029, 94.908455, 95.147224, 95.38659, 
95.626564, 95.86715, 96.10833, 96.35011, 96.592514, 96.83552, 97.07913, 97.323364, 97.56821, 97.81367, 98.059746, 98.30644, 98.553764, 98.80171, 99.05026, 99.29946, 
99.54928, 99.79972, 100.0508, 100.3025, 100.55484, 100.807816, 101.06143, 101.31568, 101.57057, 101.826096, 102.082275, 102.33909, 102.59655, 102.85467, 103.11342, 103.37283, 
103.6329, 103.89362, 104.155, 104.41702, 104.67971, 104.94308, 105.207085, 105.471756, 105.73711, 106.00312, 106.2698, 106.537155, 106.805176, 107.07388, 107.343254, 107.613304, 
107.88404, 108.15545, 108.42754, 108.70033, 108.97379, 109.24795, 109.5228, 109.798325, 110.07456, 110.35148, 110.62911, 110.90743, 111.186455, 111.46616, 111.74659, 112.02773, 
112.30957, 112.59212, 112.875374, 113.15933, 113.444016, 113.72944, 114.01555, 114.30238, 114.589935, 114.87823, 115.16725, 115.456985, 115.74744, 116.038635, 116.33056, 116.623215, 
116.91663, 117.21077, 117.505646, 117.80126, 118.09762, 118.394745, 118.6926, 118.991196, 119.29055, 119.59065, 119.89152, 120.19316, 120.49553, 120.798676, 121.10257, 121.40724, 
121.71269, 122.01888, 122.32586, 122.6336, 122.94212, 123.25142, 123.5615, 123.87236, 124.18399, 124.49641, 124.80961, 125.12361, 125.43839, 125.753975, 126.070335, 126.3875, 
126.70547, 127.02425, 127.34381, 127.66417, 127.98535, 128.30733, 128.63014, 128.95375, 129.27817, 129.6034, 129.92944, 130.25632, 130.58401, 130.91254, 131.24188, 131.57207, 
131.90306, 132.23492, 132.5676, 132.90111, 133.23544, 133.57065, 133.90666, 134.24356, 134.58128, 134.91988, 135.2593, 135.59956, 135.94073, 136.28273, 136.62558, 136.9693, 
137.31389, 137.65932, 138.00566, 138.35286, 138.70091, 139.04985, 139.39967, 139.7504, 140.10197, 140.45444, 140.80779, 141.16202, 141.51715, 141.8732, 142.23012, 142.58794, 
142.94666, 143.30627, 143.66682, 144.02826, 144.3906, 144.75385, 145.11801, 145.4831, 145.84912, 146.21605, 146.5839, 146.95265, 147.32234, 147.69301, 148.06456, 148.43706, 
148.81049, 149.18486, 149.56018, 149.93646, 150.31366, 150.69182, 151.07092, 151.45097, 151.832, 152.21399, 152.59692, 152.98082, 153.36568, 153.75153, 154.13834, 154.52612, 
154.91487, 155.3046, 155.6953, 156.08702, 156.47969, 156.87337, 157.26802, 157.66367, 158.06032, 158.45798, 158.85661, 159.25626, 159.65692, 160.05858, 160.46127, 160.86496, 
161.26965, 161.67537, 162.0821, 162.48987, 162.89868, 163.30849, 163.71933, 164.13121, 164.54413, 164.9581, 165.37311, 165.78914, 166.20622, 166.62436, 167.04355, 167.46382, 
167.88512, 168.30746, 168.7309, 169.15538, 169.58096, 170.00758, 170.43529, 170.86406, 171.29391, 171.72484, 172.15689, 172.59, 173.0242, 173.45949, 173.89586, 174.33337, 
174.77196, 175.21164, 175.65244, 176.09433, 176.53734, 176.9815, 177.42674, 177.87311, 178.32059, 178.7692, 179.21898, 179.66985, 180.12184, 180.575, 181.02928, 181.4847, 
181.9413, 182.39903, 182.8579, 183.31792, 183.77911, 184.24149, 184.70499, 185.16966, 185.6355, 186.10251, 186.57071, 187.0401, 187.51065, 187.98238, 188.4553, 188.92941, 
189.40474, 189.88124, 190.35893, 190.83783, 191.31793, 191.79924, 192.2818, 192.76552, 193.25049, 193.73665, 194.22404, 194.71266, 195.20256, 195.69363, 196.18596, 196.67952, 
197.1743, 197.67038, 198.16766, 198.66621, 199.16602, 199.66707, 200.16939, 200.67299, 201.17784, 201.68396, 202.19133, 202.7, 203.20998, 203.7212, 204.23373, 204.74753, 
205.26263, 205.77902, 206.29674, 206.81573, 207.33603, 207.85765, 208.38057, 208.90482, 209.43037, 209.95726, 210.48547, 211.015, 211.54585, 212.0781, 212.61162, 213.1465, 
213.68274, 214.2203, 214.75926, 215.29955, 215.84119, 216.3842, 216.92856, 217.47432, 218.02145, 218.56995, 219.11981, 219.67107, 220.22371, 220.77779, 221.3332, 221.89003, 
222.44826, 223.00786, 223.5689, 224.1314, 224.69525, 225.26053, 225.82721, 226.39536, 226.96495, 227.53595, 228.10835, 228.68224, 229.25754, 229.83429, 230.41255, 230.9922, 
231.57332, 232.1559, 232.73996, 233.3255, 233.91249, 234.50098, 235.09091, 235.68236, 236.27528, 236.86972, 237.46562, 238.06303, 238.66196, 239.26237, 239.86433, 240.46777, 
241.07272, 241.67921, 242.2872, 242.89676, 243.50787, 244.12045, 244.73462, 245.35031, 245.96756, 246.5864, 247.20674, 247.82866, 248.45213, 249.07718, 249.7038, 250.33202, 
250.9618, 251.59317, 252.22612, 252.86066, 253.49683, 254.13455, 254.7739, 255.41486, 256.05743, 256.7016, 257.34744, 257.99487, 258.64392, 259.29462, 259.94693, 260.60092, 
261.25656, 261.91382, 262.57272, 263.2333, 263.89554, 264.55948, 265.22504, 265.89227, 266.5612, 267.23178, 267.9041, 268.5781, 269.25378, 269.93115, 270.61026, 271.29105, 
271.9736, 272.6578, 273.34375, 274.03143, 274.72083, 275.412, 276.10486, 276.79947, 277.49582, 278.19394, 278.8938, 279.5955, 280.2989, 281.00406, 281.71097, 282.4197, 
283.13025, 283.84256, 284.5566, 285.2725, 285.99017, 286.70966, 287.431, 288.1541, 288.87903, 289.60577, 290.33438, 291.06482, 291.79706, 292.53116, 293.2671, 294.00488, 
294.74454, 295.48608, 296.22946, 296.9747, 297.72183, 298.47083, 299.22174, 299.97452, 300.7292, 301.48575, 302.24423, 303.00458, 303.76694, 304.53113, 305.29724, 306.0653, 
306.8353, 307.60727, 308.38113, 309.15695, 309.93472, 310.71445, 311.49612, 312.27982, 313.06546, 313.85306, 314.6426, 315.43417, 316.22778, 317.02335, 317.8209, 318.62045, 
319.42203, 320.22562, 321.03128, 321.83893, 322.6486, 323.4603, 324.27405, 325.08987, 325.90775, 326.72763, 327.54962, 328.37366, 329.19977, 330.028, 330.85828, 331.69064, 
332.5251, 333.36163, 334.20038, 335.0411, 335.884, 336.729, 337.57614, 338.4254, 339.27686, 340.13037, 340.98605, 341.8439, 342.70392, 343.56613, 344.43045, 345.29697, 
346.16565, 347.03653, 347.90958, 348.7849, 349.66235, 350.54202, 351.4239, 352.308, 353.19437, 354.08292, 354.97372, 355.86676, 356.76202, 357.65955, 358.5594, 359.46146, 
360.36575, 361.27234, 362.1812, 363.09244, 364.0059, 364.92166, 365.8397, 366.76007, 367.68277, 368.60782, 369.53513, 370.46478, 371.39682, 372.33115, 373.2679, 374.20697, 
375.14838, 376.09216, 377.03833, 377.98685, 378.93784, 379.89117, 380.84686, 381.805, 382.7655, 383.72855, 384.69388, 385.66168, 386.63193, 387.60458, 388.5797, 389.55734, 
390.53738, 391.5199, 392.50485, 393.4923, 394.4823, 395.47473, 396.46964, 397.46707, 398.46698, 399.46942, 400.4745, 401.48196, 402.492, 403.50458, 404.5197, 405.53745, 
406.55768, 407.5805, 408.60587, 409.63382, 410.66437, 411.69757, 412.73328, 413.77164, 414.81256, 415.85614, 416.9024, 417.95123, 419.0027, 420.0568, 421.1136, 422.17297, 
423.23514, 424.2999, 425.36734, 426.43747, 427.51025, 428.58585, 429.6641, 430.74503, 431.82864, 432.91504, 434.00415, 435.09607, 436.19067, 437.28802, 438.38812, 439.491, 
440.59665, 441.7051, 442.8163, 443.9305, 445.0473, 446.16696, 447.28937, 448.41467, 449.54276, 450.67368, 451.8075, 452.94412, 454.08365, 455.226, 456.3714, 457.51953, 
458.67053, 459.82443, 460.9812, 462.14096, 463.30356, 464.46915, 465.63763, 466.80905, 467.98346, 469.16095, 470.34122, 471.5245, 472.71075, 473.89993, 475.09216, 476.2874, 
477.48563, 478.6869, 479.8911, 481.09842, 482.3089, 483.52228, 484.7387, 485.9582, 487.18076, 488.40634, 489.6351, 490.86688, 492.1018, 493.33978, 494.5809, 495.82535, 
497.0727, 498.3232, 499.5769, 500.8337, 502.09366, 503.3568, 504.62317, 505.89267, 507.16537, 508.44125, 509.72058, 511.00287, 512.28845, 513.5773, 514.86926, 516.16455, 
517.46313, 518.76495, 520.07, 521.3784, 522.69006, 524.0052, 525.3234, 526.645, 527.97, 529.2982, 530.6298, 531.9647, 533.30304, 534.6447, 535.98975, 537.3382, 
538.6901, 540.04535, 541.404, 542.766, 544.13153, 545.5004, 546.87274, 548.24854, 549.6278, 551.01056, 552.3967, 553.7866, 555.1798, 556.5765, 557.97675, 559.3805, 
560.7877, 562.19855, 563.6129, 565.0308, 566.4523, 567.8773, 569.3062, 570.7384, 572.17426, 573.6137, 575.05676, 576.50354, 577.9538, 579.40784, 580.8655, 582.3268, 
583.7918, 585.2607, 586.73303, 588.20917, 589.6889, 591.1724, 592.65967, 594.15063, 595.6454, 597.14386, 598.6462, 600.1522, 601.6623, 603.1759, 604.69336, 606.21466, 
607.7397, 609.2686, 610.8014, 612.3381, 613.87854, 615.4229, 616.9711, 618.5235, 620.0795, 621.6395, 623.2034, 624.77124, 626.343, 627.91876, 629.4984, 631.0821, 
632.6698, 634.2614, 635.8573, 637.4569, 639.06067, 640.66833, 642.2801, 643.89594, 645.5158, 647.1398, 648.7679, 650.4, 652.03625, 653.6768, 655.32135, 656.97, 
658.62274, 660.27966, 661.9408, 663.606, 665.2755, 666.94916, 668.6271, 670.3092, 671.9957, 673.68634, 675.38116, 677.08026, 678.7836, 680.4913, 682.20325, 683.91943, 
685.6401, 687.365, 689.09424, 690.828, 692.566, 694.30835, 696.05505, 697.80615, 699.56165, 701.3216, 703.08594, 704.85474, 706.628, 708.4057, 710.1881, 711.9748, 
713.7659, 715.5616, 717.36176, 719.1665, 720.9757, 722.78955, 724.6079, 726.43085, 728.25836, 730.0907, 731.9274, 733.7688, 735.61475, 737.46545, 739.32074, 741.18066, 
743.0453, 744.9146, 746.78864, 748.66736, 750.5511, 752.43933, 754.3323, 756.23, 758.13245, 760.0398, 761.95184, 763.8687, 765.7904, 767.717, 769.6484, 771.5849, 
773.526, 775.472, 777.4229, 779.3787, 781.3395, 783.3051, 785.27576, 787.2513, 789.2318, 791.21735, 793.2081, 795.2036, 797.20416, 799.2097, 801.2204, 803.2361, 
805.2568, 807.28265, 809.31354, 811.3496, 813.39075, 815.4373, 817.4888, 819.54535, 821.6071, 823.67413, 825.7463, 827.82367, 829.90625, 831.99414, 834.0872, 836.18555, 
838.2895, 840.39844, 842.51263, 844.6322, 846.75714, 848.8874, 851.02295, 853.1639, 855.3103, 857.46204, 859.61914, 861.7821, 863.9501, 866.1236, 868.30255, 870.487, 
872.6769, 874.8724, 877.0733, 879.27985, 881.49194, 883.70953, 885.93304, 888.16187, 890.39624, 892.6362, 894.8819, 897.1332, 899.3902, 901.65283, 903.9212, 906.1952, 
908.475, 910.76074, 913.05206, 915.34906, 917.6519, 919.9604, 922.2748, 924.5951, 926.92114, 929.25305, 931.5908, 933.9345, 936.28436, 938.63983, 941.00116, 943.3685, 
945.7419, 948.1211, 950.5063, 952.8976, 955.29486, 957.6981, 960.1074, 962.5232, 964.9447, 967.37225, 969.80597, 972.2457, 974.69165, 977.1437, 979.602, 982.0664, 
984.5371, 987.0139, 989.4973, 991.9867, 994.48224, 996.9842, 999.4924, 1002.00684, 1004.52765, 1007.0548, 1009.58826, 1012.1282, 1014.6744, 1017.2275, 1019.7866, 1022.3521, 
1024.9241, 1027.5026, 1030.0874, 1032.679, 1035.277, 1037.8815, 1040.4924, 1043.1101, 1045.7346, 1048.3655, 1051.0029, 1053.6471, 1056.2977, 1058.9551, 1061.6193, 1064.29, 
1066.9674, 1069.6517, 1072.3427, 1075.0408, 1077.7454, 1080.4567, 1083.1748, 1085.8998, 1088.6317, 1091.3705, 1094.1161, 1096.8687, 1099.6282, 1102.3944, 1105.1682, 1107.9486, 
1110.7358, 1113.5303, 1116.3315, 1119.14, 1121.9554, 1124.7781, 1127.6078, 1130.4446, 1133.2885, 1136.1399, 1138.9982, 1141.8635, 1144.7363, 1147.6161, 1150.5033, 1153.3977, 
1156.2993, 1159.2084, 1162.1245, 1165.0482, 1167.9796, 1170.918, 1173.8636, 1176.8168, 1179.7775, 1182.7455, 1185.721, 1188.704, 1191.6945, 1194.6925, 1197.698, 1200.7115, 
1203.7323, 1206.7605, 1209.7965, 1212.8401, 1215.8912, 1218.9501, 1222.0167, 1225.091, 1228.1731, 1231.2628, 1234.3608, 1237.4662, 1240.5793, 1243.7003, 1246.8292, 1249.9658, 
1253.1105, 1256.2631, 1259.4235, 1262.5919, 1265.7683, 1268.9531, 1272.1454, 1275.3458, 1278.5543, 1281.7709, 1284.9955, 1288.2281, 1291.4691, 1294.7181, 1297.9753, 1301.2407, 
};
	
#define FREQUENCY(pitch) pgm_read_float_near(&pitches[pitch]);

float drawbarFrequencies[9] = { 0.5, 1.0, 1.5, 2.0, 3.0, 4.0, 5.0, 6.0, 8.0 };

// These are the amplitudes of each of the drawbar stop positions (0...8).
// Each additional stop increases by 3db.  I think I have this right?  Not sure.
// We are int8_t, not uin8_t, so we can multiply faster against oscils, which is
// also int8_t.
uint8_t drawBarAmplitudes[9] = 
	{
	0, 7, 18, 32, 48, 65, 85, 105, 127
	};

void setup()
{
//Serial.begin(9600);
  startMozzi();
  // Fire up the leslie
#ifdef LESLIE_ON  
  leslie.setFreq((float)LESLIE_FREQUENCY);
#endif

// precompute the drawbars so we don't have to compute them during updateAudio()
for(uint8_t i = 0; i < NUM_DRAWBAR_SELECTIONS; i++)
	{
	for(uint8_t j = 0; j < 9; j++)
		{
		drawbars[i][j] = drawBarAmplitudes[drawbars[i][j]];
		}
	}
}

void loop()
{
  audioHook();
}


#define CV_POT_IN1    A2    // Organ Selection
#define CV_POT_IN2    A1    // Pitch Tune
#define CV_POT3       A0    // Gain
#define CV_IN3        A3    // Pitch
#define CV_AUDIO_IN   A4    // [Unused]
#define CV_AUDIO_OUT  9     // Out
#define CV_GATE_OUT   8     // [Unused]

// Median-Of-Three Filter for Pitch, dunno if we need it
#define MEDIAN_OF_THREE(a,b,c) (((a) <= (b)) ? (((b) <= (c)) ? (b) : (((a) < (c)) ? (c) : (a))) : (((a) <= (c)) ? (a) : (((b) < (c)) ? (c) : (b))))
uint16_t inA = 0;
uint16_t inB = 0;
uint16_t pitchCV;
uint16_t tuneCV;
uint16_t pitch;
uint8_t organ = 0;	// Current index into the drawbars array
uint16_t gain;		// our current gain

void updateControl()                          
{
	uint16_t in = mozziAnalogRead(CV_IN3);
	// let's try a median of three filter to reduce some of the jumpiness
	uint16_t pitchCV = MEDIAN_OF_THREE(in, inA, inB);
	inA = inB;
	inB = in;
	tuneCV = (tuneCV * 3 + mozziAnalogRead(CV_POT_IN2)) >> 2;
	pitch = (pitch + pitchCV + (tuneCV >> 1)) >> 1;

	
	// convert to frequency.  This oughta be a lookup table
	// INCREDIBLY, pow is almost cheap enough to use here
	//float frequency = pow(2.0, pitch * ( 44.5 / 1023.0 / 12.0)) * 27.50;
	float frequency = FREQUENCY(pitch);

	// leslie!
#ifdef LESLIE_ON
	int8_t les = leslie.next();
	frequency += les * (1.0 / (64 - LESLIE_PITCH));
#endif

	// set the drawbars
  for(uint8_t i = 0; i < 9; i++)
  	{
  	oscils[i].setFreq((frequency * drawbarFrequencies[i]));
  	}

	// determine the gain				FIXME This looks too big
	gain = 1 + mozziAnalogRead(CV_POT3)
#ifdef LESLIE_ON
   + (les >> (8 - LESLIE_VOLUME))
#endif
;

	// what organ are we playing?
  organ = (organ + (mozziAnalogRead(CV_POT_IN1) * NUM_DRAWBAR_SELECTIONS)) >> 10;
  }                                             


int updateAudio()                             
{ 
  uint8_t* d = drawbars[organ];
  int32_t val = 0;
  for(uint8_t i = 0; i < 9; i++)
  	{
	  val += (oscils[i].next() * d[i]);
  	}
  return ((val * gain) >> 16) ;
}
