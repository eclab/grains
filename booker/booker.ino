// Copyright 2023 Sean Luke
// (sean@cs.gmu.edu)
//
// Released under the Apache 2.0 License
//
// WARNING: Mozzi itself is released under a broken non-open-source license, namely the 
// Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
// This license is not compatible with the LGPL (used by the Arduino itself!) and is
// also viral, AND is non-commercial only.  What a mess.  I am pushing them to change 
// their license to something reasonable like Apache or GPL but in the meantime I don't 
// have much choice but to turn my head and ignore the broken license.  So I'm releasing
// under Apache for the time being.


/// BOOKER
///
/// Booker is a Hammond Organ simulator, complete with Leslie.  It is meant to run on the 
/// AE Modular GRAINS, but it could be  adapted to any Arduino.  
///
/// SET GRAINS TO MOZZI MODE.  Sorry, no Grains mode.
///
/// You will need to install the Mozzi Library.  You can do this from the Library Manager
/// in your Arduino IDE.
///
/// Booker comes with a Leslie, which is on by default:


#define LESLIE_ON		// To turn this off, put a // before the #define, as in //#define

// Leslie changes both the amplitude and pitch at a certain rate.
// You can adjust them here

#define LESLIE_FREQUENCY 5.66			// This is the 450 speed.  The classic slower speed is 0.66, but it's too slow
#define LESLIE_VOLUME 8				// Stick with powers of 2.  Higher values are less pronounced 
#define LESLIE_PITCH 64					// Higher values are less pronounced.  Don't go above 64 

/// CONFIGURATION
///
/// IN 1            [Unused]
/// IN 2            [Unused]
/// IN 3            Pitch CV	[This isn't IN2, like Pitch Tune, because Pitch Tune must be +/-]
/// AUDIO IN (A)    [Unused]
/// AUDIO OUT       Out
/// DIGITAL OUT (D) [Unused]
///
/// POT 1           Choice of Organ [Set the switch to MAN]
///
/// POT 2           Pitch Tune  [Set the switch to MAN]
///
/// POT 3           Volume

/// Lastly, here is our present drawbar selection.  Keep this to no more than 31 but feel free
/// to change the selections.  There is a big list of 99 selections below you could swap in.

#define NUM_DRAWBAR_SELECTIONS 16
uint8_t drawbars[NUM_DRAWBAR_SELECTIONS][9] = 
{
    { 8, 8, 8, 8, 8, 8, 8, 8, 8 },    // 888888888 Full Organ
    { 8, 8, 5, 3, 2, 4, 5, 8, 8 },    // 885324588 Blues
    { 8, 8, 8, 8, 0, 0, 0, 0, 0 },    // 888800000 Booker T. Jones 1
    { 8, 8, 8, 6, 3, 0, 0, 0, 0 },    // 888630000 Booker T. Jones 2
    { 8, 7, 8, 0, 0, 0, 4, 5, 6 },    // 878000456 Bright Comping
    { 8, 4, 3, 0, 0, 0, 0, 0, 0 },    // 843000000 Dark Comping
    { 8, 0, 8, 8, 0, 8, 0, 0, 8 },    // 808808008 Gospel 1
    { 8, 8, 8, 0, 0, 0, 0, 0, 8 },    // 888000008 Gospel 2
    { 8, 6, 8, 6, 6, 6, 5, 6, 8 },    // 868666568 Greg Allman 1
    { 8, 8, 8, 6, 0, 0, 0, 0, 0 },    // 888600000 Greg Allman 2
    { 8, 8, 6, 8, 0, 0, 3, 0, 0 },    // 886800300 Paul Shaffer 1
    { 8, 8, 8, 7, 6, 8, 8, 8, 8 },    // 888768888 Paul Shaffer 2
    { 8, 8, 8, 8, 7, 8, 6, 7, 8 },    // 888878678 Paul Shaffer 3
    { 8, 0, 8, 0, 0, 0, 0, 0, 8 },    // 808000008 Reggae
    { 0, 8, 0, 0, 0, 0, 0, 0, 0 },    // 080000000 Sine
    { 8, 7, 6, 5, 4, 3, 2, 1, 1 },    // 876543211 Strings
};

/** Here is a collection of Drawbar Selections for you.
	You can find more online.
	
    { 0, 0, 7, 7, 4, 0, 0, 3, 4 },    // 007740034 Alone in the City
    { 8, 8, 7, 7, 2, 4, 1, 1, 0 },    // 887724110 America (Gospel) (U)
    { 0, 0, 6, 6, 0, 6, 0, 0, 0 },    // 006606000 America (Gospel) (L)
    { 8, 8, 5, 3, 2, 4, 5, 8, 8 },    // 885324588 Blues
    { 8, 8, 8, 8, 0, 0, 0, 0, 0 },    // 888800000 Booker T. Jones 1
    { 8, 8, 8, 6, 3, 0, 0, 0, 0 },    // 888630000 Booker T. Jones 2
    { 8, 8, 8, 8, 0, 8, 0, 0, 8 },    // 888808008 Born to B3 (Gospel) (U)
    { 0, 0, 7, 7, 2, 5, 4, 0, 0 },    // 007725400 Born to B3 (Gospel) (L)
    { 8, 8, 8, 1, 1, 0, 0, 0, 0 },    // 888110000 Brian Auger 1
    { 8, 8, 8, 8, 0, 5, 0, 0, 0 },    // 888805000 Brian Auger 2
    { 8, 7, 8, 0, 0, 0, 4, 5, 6 },    // 878000456 Bright Comping
    { 8, 0, 0, 0, 0, 0, 8, 8, 8 },    // 800000888 Brother Jack
    { 8, 4, 3, 0, 0, 0, 0, 0, 0 },    // 843000000 Dark Comping
    { 8, 8, 8, 8, 8, 8, 8, 8, 8 },    // 888888888 Dark Solo A (U)
    { 6, 6, 2, 0, 0, 0, 0, 0, 0 },    // 662000000 Dark Solo A (L)
    { 8, 2, 8, 2, 0, 0, 0, 0, 2 },    // 828200002 Dark Solo B (U)
    { 6, 0, 6, 0, 0, 0, 0, 0, 0 },    // 606000000 Dark Solo B (L)
    { 8, 8, 8, 0, 0, 0, 8, 8, 8 },    // 888000888 Fat
    { 0, 8, 0, 0, 8, 0, 8, 8, 3 },    // 080080883 Fifth Organ (Gospel) (U)
    { 0, 0, 8, 8, 0, 6, 0, 0, 0 },    // 008806000 Fifth Organ (Gospel) (L)
    { 0, 0, 6, 8, 0, 2, 0, 0, 0 },    // 006802000 Flutes
    { 8, 8, 8, 6, 6, 6, 8, 8, 8 },    // 888666888 Full and High
    { 8, 6, 8, 8, 6, 8, 0, 6, 8 },    // 868868068 Full and Sweet
    { 8, 8, 8, 8, 8, 8, 8, 8, 8 },    // 888888888 Full Organ
    { 6, 8, 8, 6, 0, 0, 0, 0, 4 },    // 688600004 Funky Comping
    { 8, 8, 8, 8, 0, 0, 0, 0, 0 },    // 888800000 Gimme Some Loving
    { 8, 0, 8, 8, 0, 8, 0, 0, 8 },    // 808808008 Gospel 1
    { 8, 8, 8, 0, 0, 0, 0, 0, 8 },    // 888000008 Gospel 2
    { 8, 6, 8, 6, 6, 6, 5, 6, 8 },    // 868666568 Greg Allman 1
    { 8, 8, 8, 6, 0, 0, 0, 0, 0 },    // 888600000 Greg Allman 2
    { 8, 8, 6, 0, 0, 0, 0, 4, 0 },    // 886000040 Greg Allman 3
    { 8, 8, 8, 8, 0, 0, 0, 8, 8 },    // 888800088 Greg Rolie 1
    { 8, 8, 6, 4, 0, 0, 0, 0, 0 },    // 886400000 Greg Rolie 2
    { 8, 8, 8, 8, 8, 6, 6, 6, 6 },    // 888886666 Greg Rolie 4
    { 8, 8, 8, 4, 2, 0, 0, 8, 0 },    // 888420080 Groove Holmes (Gospel) (U)
    { 0, 0, 0, 5, 0, 5, 0, 0, 0 },    // 000505000 Groove Holmes (Gospel) (L)
    { 8, 8, 0, 0, 0, 0, 0, 0, 0 },    // 880000000 House Bass (Gospel) (U)
    { 0, 0, 8, 0, 8, 0, 0, 0, 0 },    // 008080000 House Bass (Gospel) (L)
    { 8, 6, 8, 6, 0, 0, 0, 0, 6 },    // 868600006 Jimmy McGriff 1
    { 8, 8, 3, 2, 0, 0, 1, 2, 5 },    // 883200125 Jimmy McGriff 2 (Gospel) (U)
    { 4, 4, 8, 6, 5, 0, 0, 0, 0 },    // 448650000 Jimmy McGriff 2 (Gospel) (L)
    { 8, 8, 8, 8, 8, 8, 8, 8, 8 },    // 888888888 Jimmy Smith 1 (U)
    { 0, 0, 7, 5, 0, 0, 0, 0, 0 },    // 007500000 Jimmy Smith 1 (L)
    { 8, 8, 8, 0, 0, 0, 0, 0, 0 },    // 888000000 Jimmy Smith 2 (U)
    { 8, 3, 8, 0, 0, 0, 0, 0, 0 },    // 838000000 Jimmy Smith 2 (L)
    { 8, 8, 8, 0, 0, 0, 0, 0, 0 },    // 888000000 Jimmy Smith 3 (U)
    { 8, 0, 8, 0, 0, 0, 0, 0, 0 },    // 808000000 Jimmy Smith 3 (L)
    { 8, 8, 8, 4, 0, 0, 0, 8, 0 },    // 888400080 Joey DeFrancesco
    { 8, 8, 4, 4, 0, 0, 0, 0, 0 },    // 884400000 Jon Lord
    { 8, 8, 0, 0, 6, 0, 0, 0, 0 },    // 880060000 Latin (Gospel) (U)
    { 0, 0, 6, 6, 7, 6, 0, 0, 0 },    // 006676000 Latin (Gospel) (L)
    { 8, 0, 0, 8, 0, 8, 0, 0, 0 },    // 800808000 Matthew Fisher
    { 8, 6, 8, 8, 0, 0, 0, 0, 4 },    // 868800004 Melvin Crispel
    { 8, 0, 3, 6, 0, 0, 0, 0, 0 },    // 803600000 Mellow
    { 0, 0, 7, 8, 0, 0, 4, 5, 3 },    // 007800453 Meditation Time (Gospel) (U)
    { 0, 0, 6, 7, 0, 0, 5, 4, 0 },    // 006700540 Meditation Time (Gospel) (L)
    { 8, 8, 6, 8, 0, 0, 3, 0, 0 },    // 886800300 Paul Shaffer 1
    { 8, 8, 8, 7, 6, 8, 8, 8, 8 },    // 888768888 Paul Shaffer 2
    { 8, 8, 8, 8, 7, 8, 6, 7, 8 },    // 888878678 Paul Shaffer 3
    { 8, 5, 0, 0, 0, 5, 0, 0, 0 },    // 850005000 Pink Floyd
    { 8, 8, 8, 8, 0, 0, 0, 0, 0 },    // 888800000 Power Chords
    { 8, 8, 8, 8, 0, 0, 0, 0, 0 },    // 888800000 Progessive (Gospel) (U)
    { 0, 0, 8, 8, 8, 4, 0, 0, 0 },    // 008884000 Progessive (Gospel) (L)
    { 0, 0, 6, 8, 7, 6, 4, 0, 0 },    // 006876400 Ray Charles
    { 8, 0, 8, 0, 0, 0, 0, 0, 8 },    // 808000008 Reggae
    { 8, 8, 8, 8, 0, 0, 0, 0, 0 },    // 888800000 Rock, R&B (U)
    { 8, 4, 8, 0, 0, 0, 0, 0, 0 },    // 848000000 Rock, R&B (L)
    { 8, 0, 0, 3, 8, 8, 8, 8, 8 },    // 800388888 Screaming (Gospel) (U)
    { 0, 0, 7, 0, 3, 3, 3, 3, 3 },    // 007033333 Screaming (Gospel) (L)
    { 0, 0, 8, 8, 8, 8, 8, 0, 0 },    // 008888800 Shirley Scott
    { 8, 3, 0, 0, 0, 0, 3, 7, 8 },    // 830000378 Simmering
    { 0, 8, 0, 0, 0, 0, 0, 0, 0 },    // 080000000 Sine
    { 8, 7, 6, 5, 5, 6, 7, 8, 8 },    // 876556788 Shouting 1
    { 6, 6, 8, 8, 4, 8, 5, 8, 8 },    // 668848588 Shouting 2
    { 8, 7, 8, 6, 4, 5, 4, 6, 6 },    // 878645466 Shouting 3 (Gospel) (U)
    { 8, 8, 8, 8, 0, 0, 0, 0, 0 },    // 888800000 Shouting 3 (Gospel) (L)
    { 0, 0, 8, 4, 0, 0, 0, 0, 0 },    // 008400000 Slow Balllad
    { 0, 6, 8, 8, 4, 0, 0, 0, 3 },    // 068840003 Slowly
    { 8, 8, 8, 7, 0, 0, 0, 0, 0 },    // 888700000 Soft Backing (Gospel) (U)
    { 5, 5, 5, 4, 0, 0, 0, 0, 0 },    // 555400000 Soft Backing (Gospel) (L)
    { 8, 0, 8, 4, 0, 0, 0, 0, 8 },    // 808400008 Soft Chords
    { 6, 7, 8, 4, 0, 4, 2, 3, 1 },    // 678404231 Speaker Talking (Gospel) (U)
    { 0, 0, 6, 6, 0, 2, 0, 2, 4 },    // 006602024 Speaker Talking (Gospel) (L)
    { 8, 8, 8, 6, 4, 3, 2, 0, 0 },    // 888643200 Steppenwolf
    { 8, 8, 8, 8, 7, 6, 7, 8, 8 },    // 888876788 Steve Winwood
    { 8, 7, 6, 5, 4, 3, 2, 1, 1 },    // 876543211 Strings
    { 0, 0, 8, 0, 0, 0, 0, 0, 0 },    // 008000000 Sweet
    { 7, 8, 7, 7, 4, 6, 0, 4, 6 },    // 787746046 Testimony Service  (Gospel) (U)
    { 0, 0, 8, 8, 0, 0, 6, 7, 3 },    // 008800673 Testimony Service  (Gospel) (L)
    { 8, 7, 8, 6, 5, 6, 4, 6, 7 },    // 878656467 Theatre Organ (Gospel) (U)
    { 0, 0, 8, 8, 4, 4, 0, 0, 0 },    // 008844000 Theatre Organ (Gospel) (L)
    { 8, 8, 8, 8, 0, 0, 0, 0, 0 },    // 888800000 Tom Coster
    { 8, 0, 0, 0, 0, 0, 0, 0, 8 },    // 800000008 Whistle 1
    { 8, 8, 8, 0, 0, 0, 0, 0, 8 },    // 888000008 Whistle 2
    { 6, 8, 8, 6, 0, 0, 0, 0, 0 },    // 688600000 Whiter Shade Of Pale 1 (U)
    { 8, 8, 0, 0, 7, 0, 7, 7, 0 },    // 880070770 Whiter Shade Of Pale 1 (L)
    { 8, 8, 8, 8, 0, 8, 0, 0, 6 },    // 888808006 Whiter Shade Of Pale 2 (U)
    { 0, 0, 4, 4, 4, 0, 0, 0, 0 },    // 004440000 Whiter Shade Of Pale 2 (L)
    { 8, 6, 6, 8, 0, 0, 0, 0, 0 },    // 866800000 Wide Leslie
*/    



// ADJUSTING TRACKING

// Grains can only do about 3.75 octaves due to its circuit design.  I have positioned 
// it to start at the C two octaves below middle C.  For the same reason, I have to 
// "stretch" Grains from 3.75V to 5V, so to speak, in software.  I have tuned this 
// stretch for my own Grains, but if Booker is tracking well in your Grains, get with 
// me and we might be able to customize it for you.
//
// In short, you can play with the function that has "pow(...)" in it below to get the
// tracking you need.  65.41 is the frequency two octaves below middle C.  45.2 is the
// stretch factor appropriate for my grains -- higher is more stretched.  60 is a full
// 5V, 5-octave (60 note) stretch.  You might need to stretch or decrease by just a tad,
// like .1 or .2.  I don't know how consistent Grains' internal resistors are from unit
// to unit.
//
// Once you have a desired base frequency and stretch value, you could pump out all the
// values from 0 to 1023 and put them into the "pitch[]" table.  I use some lisp code
// as below but you can choose whatever language suits your fancy.  :-)  Then use the
// FREQUENCIES macro instead of the pow() function, it's significantly faster.



#define CONTROL_RATE 100			// More than this and we're gonna get clicks probably

#include <MozziGuts.h>
#include <Oscil.h>
#include <tables/sin256_int8.h>

/// OSCILLATORS

Oscil<SIN256_NUM_CELLS, AUDIO_RATE> tonewheel1(SIN256_DATA);
Oscil<SIN256_NUM_CELLS, AUDIO_RATE> tonewheel2(SIN256_DATA);
Oscil<SIN256_NUM_CELLS, AUDIO_RATE> tonewheel3(SIN256_DATA);
Oscil<SIN256_NUM_CELLS, AUDIO_RATE> tonewheel4(SIN256_DATA);
Oscil<SIN256_NUM_CELLS, AUDIO_RATE> tonewheel5(SIN256_DATA);
Oscil<SIN256_NUM_CELLS, AUDIO_RATE> tonewheel6(SIN256_DATA);
Oscil<SIN256_NUM_CELLS, AUDIO_RATE> tonewheel7(SIN256_DATA);
Oscil<SIN256_NUM_CELLS, AUDIO_RATE> tonewheel8(SIN256_DATA);
Oscil<SIN256_NUM_CELLS, AUDIO_RATE> tonewheel9(SIN256_DATA);

Oscil<SIN256_NUM_CELLS, AUDIO_RATE> oscils[9] = 
	{ 
	tonewheel1, tonewheel2, tonewheel3,
	tonewheel4, tonewheel5, tonewheel6, 
	tonewheel7, tonewheel8, tonewheel9 
	};

#ifdef LESLIE_ON
Oscil<SIN256_NUM_CELLS, CONTROL_RATE> leslie(SIN256_DATA);		// Leslie LFO
#endif
	
// This has custom tracking for my Grains module.  To change the base note, you need to specify
// its frequency (I have 65.41, C two octaves below middle C).  And to "stretch" it, you need to
// change 45.2 to something else -- bigger is more stretched, and 60 would be perfectly 5V.  :-(
//
// (dotimes (p 1024) 
//	(format t "~a, " (* 65.41 (expt 2.0 (* p 45.2 1/1023 1/12))))
//	(when (= 15 (mod p 16)) (terpri)))
//
// I can't explain why it's 75% (45.0 vs 50.0)

PROGMEM const float pitches[1024] = {
65.41, 65.57715, 65.744736, 65.912735, 66.08117, 66.25003, 66.419334, 66.58906, 66.759224, 66.92982, 67.10085, 67.27232, 67.44424, 67.616585, 67.78937, 67.9626, 
68.13627, 68.31039, 68.48495, 68.65996, 68.83541, 69.011314, 69.18767, 69.36447, 69.541725, 69.71943, 69.89759, 70.07621, 70.25529, 70.434814, 70.61481, 70.79526, 
70.97617, 71.15754, 71.33938, 71.52168, 71.70445, 71.88768, 72.07138, 72.25556, 72.4402, 72.62531, 72.810905, 72.99697, 73.18351, 73.37052, 73.558014, 73.74598, 
73.93443, 74.12337, 74.31278, 74.502686, 74.69307, 74.883934, 75.0753, 75.26715, 75.45948, 75.65231, 75.845634, 76.03946, 76.23377, 76.42857, 76.623886, 76.81969, 
77.016, 77.2128, 77.41012, 77.607925, 77.80625, 78.00508, 78.204414, 78.40425, 78.604614, 78.80548, 79.00686, 79.208755, 79.41116, 79.6141, 79.81754, 80.02151, 
80.226, 80.43101, 80.63654, 80.842606, 81.049194, 81.2563, 81.46394, 81.67212, 81.88082, 82.09007, 82.299835, 82.51015, 82.72099, 82.93238, 83.14431, 83.35678, 
83.569786, 83.78335, 83.99745, 84.2121, 84.42729, 84.64304, 84.85934, 85.07619, 85.293594, 85.51156, 85.73007, 85.94914, 86.168785, 86.38898, 86.60974, 86.83106, 
87.052956, 87.275406, 87.498436, 87.72202, 87.9462, 88.17094, 88.39625, 88.62213, 88.8486, 89.075645, 89.30327, 89.53148, 89.76027, 89.98964, 90.219604, 90.45015, 
90.68129, 90.91302, 91.14534, 91.37826, 91.611755, 91.84587, 92.080574, 92.31588, 92.55178, 92.78829, 93.025406, 93.263115, 93.50145, 93.74039, 93.979935, 94.220085, 
94.46085, 94.70224, 94.944244, 95.186874, 95.430115, 95.67397, 95.918465, 96.16357, 96.40932, 96.65568, 96.90267, 97.1503, 97.39856, 97.64745, 97.89698, 98.14715, 
98.39795, 98.6494, 98.90149, 99.15423, 99.40761, 99.66164, 99.916306, 100.17164, 100.42762, 100.68425, 100.94154, 101.19949, 101.4581, 101.71736, 101.977295, 102.23789, 
102.499146, 102.76108, 103.023674, 103.28694, 103.55089, 103.8155, 104.080795, 104.346756, 104.61341, 104.88074, 105.14875, 105.41746, 105.686844, 105.95691, 106.22768, 106.49913, 
106.77128, 107.04413, 107.31767, 107.5919, 107.86685, 108.142494, 108.418846, 108.6959, 108.97366, 109.25214, 109.53132, 109.81122, 110.09183, 110.37316, 110.65521, 110.93798, 
111.22147, 111.50569, 111.790634, 112.07631, 112.3627, 112.64984, 112.937706, 113.22631, 113.515656, 113.805725, 114.09655, 114.388115, 114.68043, 114.97348, 115.26728, 115.56184, 
115.85715, 116.15321, 116.450035, 116.747604, 117.045944, 117.34505, 117.64492, 117.94554, 118.24695, 118.54911, 118.85205, 119.15577, 119.460266, 119.76553, 120.07159, 120.37842, 
120.686035, 120.99444, 121.30363, 121.61361, 121.924385, 122.235954, 122.54832, 122.86147, 123.17544, 123.490204, 123.80578, 124.12215, 124.43933, 124.757324, 125.076126, 125.39575, 
125.71619, 126.037445, 126.35953, 126.68243, 127.00615, 127.3307, 127.65609, 127.9823, 128.30936, 128.63724, 128.96596, 129.29552, 129.62593, 129.95717, 130.28926, 130.62221, 
130.956, 131.29065, 131.62616, 131.96251, 132.29971, 132.63782, 132.97675, 133.31656, 133.65724, 133.9988, 134.3412, 134.68451, 135.0287, 135.37373, 135.71968, 136.0665, 
136.4142, 136.76279, 137.11229, 137.46265, 137.81393, 138.1661, 138.5192, 138.87315, 139.22803, 139.58383, 139.9405, 140.29813, 140.65663, 141.01607, 141.37642, 141.73772, 
142.0999, 142.46301, 142.82709, 143.19206, 143.55797, 143.92482, 144.29262, 144.66133, 145.031, 145.40163, 145.7732, 146.14569, 146.51915, 146.89357, 147.26895, 147.64528, 
148.02258, 148.40083, 148.78008, 149.16026, 149.54143, 149.92357, 150.30669, 150.69078, 151.07585, 151.46191, 151.84897, 152.237, 152.62604, 153.01605, 153.40707, 153.79909, 
154.19211, 154.58615, 154.98117, 155.3772, 155.77426, 156.17233, 156.57143, 156.97153, 157.37265, 157.77481, 158.17798, 158.5822, 158.98744, 159.39372, 159.80104, 160.20938, 
160.61879, 161.02924, 161.44075, 161.85327, 162.26689, 162.68155, 163.09726, 163.51405, 163.9319, 164.3508, 164.77078, 165.19185, 165.61398, 166.03719, 166.46149, 166.88686, 
167.31332, 167.74089, 168.16953, 168.59927, 169.0301, 169.46205, 169.89511, 170.32924, 170.76451, 171.2009, 171.63838, 172.077, 172.51672, 172.95757, 173.39955, 173.84265, 
174.2869, 174.73227, 175.17879, 175.62645, 176.07523, 176.52519, 176.97629, 177.42853, 177.88193, 178.33649, 178.7922, 179.2491, 179.70715, 180.1664, 180.62679, 181.08836, 
181.55112, 182.01505, 182.48016, 182.94649, 183.41399, 183.88269, 184.3526, 184.82368, 185.29597, 185.76949, 186.24422, 186.72014, 187.19728, 187.67566, 188.15524, 188.63606, 
189.1181, 189.6014, 190.08589, 190.57164, 191.05862, 191.54686, 192.03635, 192.52708, 193.01906, 193.51231, 194.0068, 194.5026, 194.99962, 195.49792, 195.99751, 196.49835, 
197.00047, 197.50392, 198.0086, 198.51459, 199.0219, 199.53049, 200.04036, 200.55154, 201.06404, 201.57784, 202.09296, 202.60939, 203.12714, 203.64621, 204.16661, 204.68834, 
205.2114, 205.73581, 206.26155, 206.78862, 207.31706, 207.84683, 208.37798, 208.91046, 209.44432, 209.97954, 210.51611, 211.05408, 211.59341, 212.13411, 212.67621, 213.2197, 
213.76453, 214.3108, 214.85846, 215.40752, 215.95796, 216.50983, 217.0631, 217.61778, 218.17389, 218.73141, 219.29036, 219.85074, 220.41255, 220.97581, 221.54048, 222.1066, 
222.6742, 223.2432, 223.81369, 224.38564, 224.95901, 225.53387, 226.11021, 226.68803, 227.2673, 227.84807, 228.43033, 229.01405, 229.59927, 230.18599, 230.7742, 231.36394, 
231.95518, 232.54793, 233.14217, 233.73795, 234.33525, 234.93407, 235.53442, 236.1363, 236.73973, 237.34471, 237.95122, 238.55928, 239.1689, 239.78008, 240.39282, 241.0071, 
241.623, 242.24045, 242.85945, 243.48006, 244.10226, 244.72603, 245.35141, 245.9784, 246.60698, 247.23715, 247.86894, 248.50235, 249.13736, 249.77403, 250.41231, 251.0522, 
251.69376, 252.33693, 252.98177, 253.62823, 254.27635, 254.92615, 255.57758, 256.23068, 256.88547, 257.5419, 258.20004, 258.85986, 259.52133, 260.1845, 260.84943, 261.516, 
262.18423, 262.85428, 263.52597, 264.19937, 264.87454, 265.5514, 266.22995, 266.91034, 267.59235, 268.27618, 268.96176, 269.64905, 270.3381, 271.02896, 271.72153, 272.4159, 
273.11203, 273.8099, 274.5096, 275.21112, 275.9144, 276.6195, 277.32635, 278.03503, 278.74557, 279.45786, 280.17197, 280.88794, 281.6057, 282.32532, 283.0468, 283.7701, 
284.49524, 285.22226, 285.95108, 286.68182, 287.41443, 288.1489, 288.8852, 289.62344, 290.36356, 291.10556, 291.84946, 292.59525, 293.343, 294.09256, 294.8441, 295.59753, 
296.3529, 297.1102, 297.86948, 298.63065, 299.39374, 300.15884, 300.92587, 301.69482, 302.46582, 303.23874, 304.0136, 304.79053, 305.56937, 306.35028, 307.1331, 307.91794, 
308.70483, 309.49368, 310.28455, 311.07748, 311.8724, 312.66934, 313.46835, 314.26938, 315.07248, 315.87762, 316.6848, 317.49408, 318.30542, 319.11884, 319.9343, 320.75186, 
321.5715, 322.3933, 323.21713, 324.04306, 324.87115, 325.70132, 326.5336, 327.36807, 328.20462, 329.0433, 329.88416, 330.72714, 331.57227, 332.41962, 333.26907, 334.12067, 
334.97455, 335.8305, 336.68866, 337.54907, 338.41165, 339.2764, 340.14346, 341.01263, 341.8841, 342.75772, 343.6336, 344.51175, 345.39212, 346.27472, 347.15964, 348.04672, 
348.9361, 349.82782, 350.72177, 351.618, 352.51657, 353.41736, 354.3205, 355.22592, 356.1337, 357.0437, 357.95618, 358.87085, 359.78796, 360.70734, 361.6291, 362.55325, 
363.47968, 364.40854, 365.33975, 366.27335, 367.2093, 368.1477, 369.08844, 370.0316, 370.97723, 371.9252, 372.8756, 373.8285, 374.78378, 375.7415, 376.7017, 377.6643, 
378.62946, 379.59695, 380.56696, 381.53952, 382.5145, 383.49194, 384.472, 385.45444, 386.4394, 387.42697, 388.41696, 389.40952, 390.40466, 391.40228, 392.40247, 393.40527, 
394.41055, 395.41843, 396.4289, 397.44193, 398.45758, 399.4758, 400.4966, 401.52008, 402.54608, 403.57477, 404.60608, 405.64, 406.67657, 407.71582, 408.7577, 409.80222, 
410.8495, 411.89935, 412.9519, 414.0072, 415.06512, 416.1258, 417.1892, 418.25528, 419.32413, 420.39566, 421.46988, 422.54697, 423.62674, 424.70926, 425.79462, 426.8827, 
427.9735, 429.0672, 430.1636, 431.26285, 432.36493, 433.4698, 434.57745, 435.68805, 436.80136, 437.91754, 439.03668, 440.15854, 441.2834, 442.411, 443.54156, 444.67505, 
445.81134, 446.95053, 448.09274, 449.2378, 450.3857, 451.53668, 452.69052, 453.84735, 455.00714, 456.16983, 457.3355, 458.50424, 459.6759, 460.85052, 462.02823, 463.2089, 
464.39255, 465.57935, 466.76904, 467.96185, 469.15768, 470.35657, 471.55856, 472.76355, 473.97165, 475.1829, 476.39716, 477.61453, 478.83508, 480.05865, 481.2854, 482.51532, 
483.74832, 484.9845, 486.22385, 487.46634, 488.712, 489.9609, 491.21292, 492.46823, 493.72668, 494.9883, 496.25327, 497.52136, 498.7927, 500.0674, 501.34525, 502.62634, 
503.91083, 505.1985, 506.48947, 507.7838, 509.0814, 510.38226, 511.68655, 512.9941, 514.305, 515.61926, 516.9369, 518.25793, 519.5823, 520.91, 522.2412, 523.5757, 
524.91364, 526.25507, 527.59985, 528.948, 530.29974, 531.65485, 533.0134, 534.37555, 535.7411, 537.11005, 538.48267, 539.8587, 541.2382, 542.6214, 544.008, 545.3982, 
546.7919, 548.1891, 549.59, 550.99445, 552.4024, 553.8141, 555.2293, 556.64813, 558.0706, 559.4967, 560.9264, 562.35986, 563.79694, 565.2376, 566.68207, 568.1301, 
569.5819, 571.03754, 572.4967, 573.9597, 575.4264, 576.8968, 578.3711, 579.84906, 581.33075, 582.81635, 584.30566, 585.79877, 587.2958, 588.7966, 590.30115, 591.80963, 
593.32196, 594.83813, 596.3582, 597.88214, 599.41, 600.9418, 602.47736, 604.017, 605.5605, 607.1079, 608.65936, 610.2148, 611.77405, 613.3374, 614.9047, 616.4761, 
618.05145, 619.6308, 621.2142, 622.8017, 624.3932, 625.9888, 627.5885, 629.1922, 630.8, 632.412, 634.0281, 635.6483, 637.27264, 638.90106, 640.5338, 642.17065, 
643.8116, 645.45685, 647.10626, 648.7598, 650.4177, 652.0798, 653.7461, 655.41675, 657.0916, 658.7707, 660.45416, 662.14185, 663.8339, 665.53033, 667.231, 668.93604, 
670.6455, 672.35925, 674.07745, 675.8, 677.52686, 679.2583, 680.994, 682.73425, 684.47894, 686.2281, 687.9816, 689.73975, 691.5023, 693.26935, 695.041, 696.8171, 
698.5977, 700.383, 702.17267, 703.96704, 705.766, 707.56946, 709.3777, 711.1904, 713.00775, 714.8299, 716.65656, 718.4878, 720.324, 722.1646, 724.01, 725.8602, 
727.715, 729.57465, 731.4391, 733.3082, 735.18207, 737.0608, 738.9443, 740.8325, 742.72577, 744.62366, 746.52655, 748.4342, 750.34674, 752.2643, 754.1866, 756.1138, 
758.0461, 759.98315, 761.9252, 763.87225, 765.8243, 767.7812, 769.7433, 771.71027, 773.68225, 775.65936, 777.6415, 779.62866, 781.62103, 783.6183, 785.6209, 787.6284, 
789.64105, 791.65906, 793.682, 795.71014, 797.7436, 799.7821, 801.82587, 803.8749, 805.92914, 807.9885, 810.0534, 812.1234, 814.19867, 816.2793, 818.36523, 820.4564, 
822.5531, 824.6551, 826.76245, 828.8751, 830.9932, 833.1168, 835.2457, 837.3801, 839.5201, 841.6653, 843.8161, 845.9724, 848.1342, 850.30145, 852.4745, 854.65283, 
856.8368, 859.0265, 861.22156, 863.4223, 865.62885, 867.8408, 870.05853, 872.28186, 874.5109, 876.7457, 878.9861, 881.23224, 883.48425, 885.7418, 888.00525, 890.27454, 
};
	
#define FREQUENCY(pitch) pgm_read_float_near(&pitches[pitch]);

float drawbarFrequencies[9] = { 0.5, 1.0, 1.5, 2.0, 3.0, 4.0, 5.0, 6.0, 8.0 };

// These are the amplitudes of each of the drawbar stop positions (0...8).
// Each additional stop increases by 3db.  I think I have this right?  Not sure.
// We are int8_t, not uin8_t, so we can multiply faster against oscils, which is
// also int8_t.
uint8_t drawBarAmplitudes[9] = 
	{
	0, 4, 9, 16, 12, 16, 43, 53, 64			// This is quite low resolution.  At present I'm doing this rather than the more accurate table below (and post-dividing by 2) because it's slightly more efficient.  But it doesn't sound quite as good probably.
//	0, 7, 18, 32, 48, 65, 85, 105, 127
	};

void setup()
{
//Serial.begin(9600);
  startMozzi();
  // Fire up the leslie
#ifdef LESLIE_ON  
  leslie.setFreq((float)LESLIE_FREQUENCY);
#endif
}

void loop()
{
  audioHook();
}


#define CV_POT_IN1    A2    // Organ Selection
#define CV_POT_IN2    A1    // Pitch Tune
#define CV_POT3       A0    // Gain
#define CV_IN3        A3    // Pitch
#define CV_AUDIO_IN   A4    // [Unused]
#define CV_AUDIO_OUT  9     // Out
#define CV_GATE_OUT   8     // [Unused]

uint8_t organ = 0;	// Current index into the drawbars array
uint16_t gain;		// our current gain

// Median-Of-Three Filter for Pitch, dunno if we need it
#define MEDIAN_OF_THREE(a,b,c) (((a) <= (b)) ? (((b) <= (c)) ? (b) : (((a) < (c)) ? (c) : (a))) : (((a) <= (c)) ? (a) : (((b) < (c)) ? (c) : (b))))
uint16_t inA = 0;
uint16_t inB = 0;

void updateControl()                          
{
	// FIXME: should we do CV_AUDIO_IN instead?
	mozziAnalogRead(CV_IN3);
	
	int16_t in = mozziAnalogRead(CV_IN3) + (mozziAnalogRead(CV_POT_IN2) >> 1) - 256;
	if (in < 0) in = 0;
	if (in > 1023) in = 1023;

	int16_t pitch = in;
	/*
	// let's try a median of three filter to reduce some of the jumpiness
	int16_t pitch = in; 	// MEDIAN_OF_THREE(in, inA, inB);
	inA = inB;
	inB = in;
	*/
	
	// convert to frequency.  This oughta be a lookup table
	// INCREDIBLY, pow is cheap enough to use here, as is division
	//float frequency = pow(2.0, pitch * ( 45.2 / 1023.0 / 12.0)) * 65.41;
	float frequency = FREQUENCY(pitch);

	// leslie!
#ifdef LESLIE_ON
	int8_t les = leslie.next();
	frequency += les * (1.0 / LESLIE_PITCH);
#endif

	// set the drawbars
  for(uint8_t i = 0; i < 9; i++)
  	{
  	oscils[i].setFreq((frequency * drawbarFrequencies[i]));
  	}


	// determine the gain				FIXME This looks too big
	gain = 1 + mozziAnalogRead(CV_POT3)
#ifdef LESLIE_ON
   + les / LESLIE_VOLUME
#endif
;

	// what organ are we playing?
  organ = (organ + (mozziAnalogRead(CV_POT_IN1) * NUM_DRAWBAR_SELECTIONS)) >> 10;
  }                                             


int updateAudio()                             
{ 
  uint8_t* d = drawbars[organ];
  int32_t val = 0;
  for(uint8_t i = 0; i < 9; i++)
  	{
	  val += (oscils[i].next() * drawBarAmplitudes[d[i]]);
  	}
  return ((val * gain) >> 16) ;
}
